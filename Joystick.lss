
Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00002186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800100  00800100  00002186  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002186  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002198  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000050ad  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019fb  00000000  00000000  000074dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c9b  00000000  00000000  00008ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000698  00000000  00000000  0000bb74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002158  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d4b  00000000  00000000  0000e364  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  000110af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__ctors_end>
       4:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
       8:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
       c:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      10:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      14:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      18:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      1c:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      20:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      24:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      28:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__vector_10>
      2c:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      30:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      34:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      38:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      3c:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      40:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      44:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      48:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      4c:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      50:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      54:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      58:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      5c:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      60:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      64:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      68:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      6c:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      70:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      74:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      78:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      7c:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      80:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      84:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      88:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      8c:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      90:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>
      94:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__bad_interrupt>

00000098 <ProductString>:
      98:	24 03 50 00 4f 00 4b 00 4b 00 45 00 4e 00 20 00     $.P.O.K.K.E.N. .
      a8:	43 00 4f 00 4e 00 54 00 52 00 4f 00 4c 00 4c 00     C.O.N.T.R.O.L.L.
      b8:	45 00 52 00 00 00                                   E.R...

000000be <ManufacturerString>:
      be:	1c 03 48 00 4f 00 52 00 49 00 20 00 43 00 4f 00     ..H.O.R.I. .C.O.
      ce:	2e 00 2c 00 4c 00 54 00 44 00 2e 00 00 00           ..,.L.T.D.....

000000dc <LanguageString>:
      dc:	04 03 09 04                                         ....

000000e0 <ConfigurationDescriptor>:
      e0:	09 02 29 00 01 01 00 80 fa 09 04 00 00 02 03 00     ..).............
      f0:	00 00 09 21 11 01 00 01 22 56 00 07 05 02 03 40     ...!...."V.....@
     100:	00 05 07 05 81 03 40 00 05                          ......@..

00000109 <DeviceDescriptor>:
     109:	12 01 00 02 00 00 00 40 0d 0f 92 00 00 01 01 02     .......@........
     119:	00 01                                               ..

0000011b <JoystickReport>:
     11b:	05 01 09 05 a1 01 15 00 25 01 35 00 45 01 75 01     ........%.5.E.u.
     12b:	95 10 05 09 19 01 29 10 81 02 05 01 25 07 46 3b     ......).....%.F;
     13b:	01 75 04 95 01 65 14 09 39 81 42 65 00 95 01 81     .u...e..9.Be....
     14b:	01 26 ff 00 46 ff 00 09 30 09 31 09 32 09 35 75     .&..F...0.1.2.5u
     15b:	08 95 04 81 02 06 00 ff 09 20 95 01 81 02 0a 21     ......... .....!
     16b:	26 95 08 91 02 c0                                   &.....

00000171 <image_data>:
     171:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     181:	ff 1f 80 58 d0 da 6a 5d bb ff 6f ff ef b7 dd 2d     ...X..j]..o....-
     191:	bd fb bf 7d fb be fd fb ff ff ff ff ff ff ff ff     ...}............
     1a1:	ff ff ff ff ff ff ff ff ff 1f 00 20 24 55 b7 ef     ........... $U..
     1b1:	fe fd ff bf ff ff ff df db fe fe ff ff ff eb ff     ................
     1c1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     1d1:	ff 1f 00 10 48 aa de fe b7 6f ff f7 7d ff 76 fb     ....H....o..}.v.
     1e1:	ee d7 ff ef df f7 7f df ff ff ff ff ff ff ff ff     ................
     1f1:	ff ff ff ff ff ff ff ff ff 1f 00 28 20 dd fa dd     ...........( ...
     201:	ff ff f7 ff ff fb fd 57 bf fd 7f fb ff bf f6 ff     .......W........
     211:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     221:	ff 1f 00 20 90 72 6b ef ee fe ff 7e f7 ef 6f bb     ... .rk....~..o.
     231:	fd ff ed ff fe fe fd fb ff ff ff ff ff ff ff ff     ................
     241:	ff ff ff ff ff ff ff ff ff 0f 00 10 48 ad dd ff     ............H...
     251:	ff f7 ff ff bf fd fe fe 6b db ff df f7 f7 bf df     ........k.......
     261:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     271:	ff 0f 00 20 80 d4 fe fd ff ff ff ff fe ff f7 b7     ... ............
     281:	df ff ff fb bf bf fa ff ff ff ff ff ff ff ff ff     ................
     291:	ff ff ff ff ff ff ff ff ff 0f 00 00 04 a9 a5 ef     ................
     2a1:	db fe bd f7 fb bb bf fd 76 ed fe ff ff ff fd fd     ........v.......
     2b1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2c1:	ff 0f 00 20 08 52 dd 7e ff ff ff bf df ff fd ef     ... .R.~........
     2d1:	bd fb bf b7 fb fd ef df ff ff ff ff ff ff ff ff     ................
     2e1:	ff ff ff ff ff ff ff ff ff 0f 00 00 48 92 fe f5     ............H...
     2f1:	ff ff ff ff f7 fe 6f df f7 d7 fb ff ff 6f 7d ff     ......o......o}.
     301:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     311:	ff 06 00 00 10 b4 a9 6f f7 ef ff ff fb b7 ff 7b     .......o.......{
     321:	af 7e ff fb df ff fe f7 ff ff ff ff ff ff ff ff     .~..............
     331:	ff ff ff ff ff ff ff ff ff 07 00 20 24 69 77 ff     ........... $iw.
     341:	fe ff dd fd fe ff fb ff 7d fb df 6f ff be fb ff     ........}..o....
     351:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     361:	ff 07 00 00 00 ea de ed bb ff ff df df fe df fe     ................
     371:	ef f7 7f ff fb 77 df bf ff ff ff ff ff ff ff ff     .....w..........
     381:	ff ff ff ff ff ff ff ff ff 06 00 00 08 d5 ed 5e     ...............^
     391:	f7 fd ff ff f7 77 ff b7 7f df fe fb ff ff fe fe     .....w..........
     3a1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3b1:	ff 01 01 40 48 ba 56 bb df ff ff ff ff ff fb ff     ...@H.V.........
     3c1:	fd fd f7 df df bf fd f7 ff ff ff ff ff ff ff ff     ................
     3d1:	ff ff ff ff ff ff ff ff bf b4 06 00 10 6d ab b5     .............m..
     3e1:	7a df ff ff af fd 6f df b7 ff 7f ff fb 7d f7 ff     z.....o......}..
     3f1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     401:	3f 69 0d 00 b0 f6 dd 6e b7 fb dd f6 fe bf ff fb     ?i.....n........
     411:	ff df ff fb ff ef 7e bf ff ff ff ff ff ff ff ff     ......~.........
     421:	ff ff ff ff ff ff ff ff 5f 4a 59 40 48 ad b2 f6     ........_JY@H...
     431:	ed ff ff ff df fe fd 7f fb fd ff 6f ff 7f ff ff     ...........o....
     441:	ff ff ff ff ff 0f fc ff ff 3f ff ff ff ff ff ff     .........?......
     451:	9f b6 ab 80 b0 b6 a7 6d 57 dd ff ff ff ff 6f ff     .......mW.....o.
     461:	df ff db ff df bd ed fb ff ff ff ff ff 3f ff ff     .............?..
     471:	ff ff ff ff ff ff ff ff 3f 49 36 01 ea dd 4a bd     ........?I6...J.
     481:	bf fb ff ff 7f ef ff fb ff ff ff f6 ff ff fe bf     ................
     491:	ff ff ff ff ff 3f 07 0e 06 1e 0f fe ff ff ff ff     .....?..........
     4a1:	bf 24 6d 05 6d db 5d eb ed ee fe df db 7d ff df     .$m.m.]......}..
     4b1:	fe 7d ff ff fd df fe ff ff ff ff ff ff 3f e7 e4     .}...........?..
     4c1:	e4 3c e7 fc ff ff ff ff 7f 01 d2 02 f4 af b3 da     .<..............
     4d1:	ff fd df fe ff ff 6f ff ff ff ff f7 df 7b bb fd     ......o......{..
     4e1:	ff ff ff ff ff 3f e7 e7 e4 3c e7 ff ff ff ff ff     .....?...<......
     4f1:	bf 02 6c 03 da de d6 ed 6e d7 ff ff ff ff fd ff     ..l.....n.......
     501:	f7 ff ff bd ff ff fe df ff ff ff ff ff 3f e7 e7     .............?..
     511:	e4 3c e7 3f ff ff ff ff 7f 01 d9 c6 fd dd bb b7     .<.?............
     521:	ff bb fd f7 bf ed ff ed ff ff df ff ff df fd ff     ................
     531:	ff ff ff ff ff 0f e4 0f e6 1c 0e 3c ff ff ff ff     ...........<....
     541:	bf 00 a5 8d f7 bf b6 7e dd 7e ff ff fe ff df ff     .......~.~......
     551:	ff ef ff f7 bb bd ff ff ff ff ff ff ff ff ff ff     ................
     561:	ff ff ff ff ff ff ff ff ff 01 6e 61 df 7b ff ed     ..........na.{..
     571:	f6 d7 df ff ff 7f ff bf 7f ff ff ff ff 7f 6d fb     ..............m.
     581:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     591:	7f 03 b9 eb fd df bf ff 6f ef fe fd bf ff fb ff     ........o.......
     5a1:	ff ff 7f 7b ff ff fe df ff ff ff ff ff ff ff ff     ...{............
     5b1:	ff ff ff ff ff ff ff ff ff 81 df d2 ff 7f f5 b7     ................
     5c1:	df fa fe bf ff f7 bf fb fb ff fd ef ef b7 ff ff     ................
     5d1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5e1:	ff 03 6d b9 bf fd ff ef bd 6d fb ff ff bf ff ff     ..m......m......
     5f1:	ff ff df ff ff 7f fd ff ff ff ff ff ff ff ff ff     ................
     601:	ff ff ff ff ff ff ff ff ff 03 da f4 f7 ef da 7e     ...............~
     611:	7f df b7 ff f7 ff ff bf b7 ff ff fb 7f ff ee 7f     ................
     621:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     631:	ff 85 b7 da ff 7f f7 e9 f7 db fe f7 ff ff bd ff     ................
     641:	ff ff ff ff fe ef 7f fb ff ff ff ff ff ff ff ff     ................
     651:	ff ff ff ff ff ff ff ff ff c7 33 fa ff ff ab d7     ..........3.....
     661:	ee b5 fd ff ff fe ff fd 7f fb 7f ff f7 bf fe ff     ................
     671:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     681:	ff 67 3f fd fd bd 5d be bd df ee ff ff ff ff ff     .g?...].........
     691:	fd 7f ff db ff 7e fb bf ff ff ff ff ff ff ff ff     .....~..........
     6a1:	ff ff ff ff ff ff ff ff ff af 9f ee bf ff f6 ea     ................
     6b1:	db fb 7b 7f ff df fd ff ff fe ef ff ff ff ff ff     ..{.............
     6c1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     6d1:	ff 4f 9a fd ff ef ab 55 ff b7 ff ef ef ff 7f fb     .O.....U........
     6e1:	df fd ff ff df b7 de f7 ff ff ff ff ff ff ff ff     ................
     6f1:	ff ff ff ff ff ff ff ff ff 1f 94 7f ff ff 2d fb     ..............-.
     701:	f6 6f ff ff ff fb ff bf ff fb 7f ff fd ff fd ff     .o..............
     711:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     721:	ff 0f 88 f6 ef f6 db d6 df fd ed ff ff ff ef ff     ................
     731:	fd ef ff fb ff 7f ff ff ff ff ff ff ff ff ff ff     ................
     741:	ff ff ff ff ff ff ff ff ff 1f 62 ff ff 5f 57 29     ..........b.._W)
     751:	fd df fe fe 7f ff ff fd ff fe f7 bf ff bd fb fe     ................
     761:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     771:	ff 1f c0 ff ff bf 9f f6 6a fd ff ff ff 7f ff ff     ........j.......
     781:	ff fb ff ff bf ff fe ef ff ff ff ff ff ff ff ff     ................
     791:	ff ff ff ff ff ff ff ff ff 1f c0 ee ff ff fe ca     ................
     7a1:	bf eb ed ff f7 ff ff ff df f7 bf ff f7 df ff ff     ................
     7b1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     7c1:	ff 1f 60 ff ee 76 fb bd ed b7 ff bf ff ff 7f ff     ..`..v..........
     7d1:	fe ff ff fd ff 7f ef ff ff ff ff ff ff ff ff ff     ................
     7e1:	ff ff ff ff ff ff ff ff ff 1f e0 ff ff ff ed 77     ...............w
     7f1:	35 df ff ff ff fb ff ff ff f7 ff bf ff ff fe fd     5...............
     801:	ff ff e7 fc ff ff ff ff 1f ff fc ff ff ff ff ff     ................
     811:	ff 1f d0 fe ff df df ee db 7a fb ff ff ff f7 ff     .........z......
     821:	ff ef bb ff ff f7 ff ff ff ff e7 fc ff ff ff ff     ................
     831:	3f ff fc ff ff ff ff ff ff 1f 68 f7 7f 7b bb 5f     ?.........h..{._
     841:	f7 ed bf fb 7f bf ff af fb ff ff ff ff be fd bf     ................
     851:	ff ff e7 0c fe 0f 0e e6 3c 0f fc 0f 0e e4 0c fe     ........<.......
     861:	ff 1f f0 ff ff ef f6 fd ae 77 ff ff ff ff ff ff     .........w......
     871:	ff f7 ff f7 ed ff de ff ff ff 07 e4 fc e7 e4 e4     ................
     881:	3c e7 fc c7 e7 e4 e4 fc ff 0f a8 ff fe b7 ad b5     <...............
     891:	7b fb f6 ff ef ff ff 7f 7f ff bf ff ff ff ff f7     {...............
     8a1:	ff ff e7 04 fc e7 e7 e4 3c e7 fc 0f e6 4c 06 fc     ........<....L..
     8b1:	ff 1f 74 ff df 5f db ee df dd ff ff ff ff ff ff     ..t.._..........
     8c1:	fa ef ff ff ff df fe ff ff ff e7 e4 ff e7 e7 e4     ................
     8d1:	3c e7 fc 7f e4 1c e7 ff ff 0f e8 fb ff af 6a 7f     <.............j.
     8e1:	fb ff ff ff fe f7 ff ff ff ff ff ff ff ff f7 ff     ................
     8f1:	ff ff e7 0c fe 0f 0c 0e 1c 0e fc 07 0e bc 0f fe     ................
     901:	ff 0f 48 df ff 7f b5 d9 6d bb fd ff ff ff f7 7f     ..H.....m.......
     911:	ed f7 bb ef fe 7d ff ff ff ff ff ff ff ff ff ff     .....}..........
     921:	ff ff ff ff ff ff ff ff ff 07 b4 ff fb bf aa bb     ................
     931:	ff f7 ff ff ff ff ff ff fb ff ff ff bf ff fe fe     ................
     941:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     951:	ff 0f e0 fd 7f 7f 49 ed b6 ff ef ff ff ff fe fe     ......I.........
     961:	ff ff ff ff ff ff ff df ff ff ff ff ff ff ff ff     ................
     971:	ff ff ff ff ff ff ff ff ff 07 c0 b6 ff bf b5 76     ...............v
     981:	6f db fd fe ff ff ff ff f6 db df ff ff df fd ff     o...............
     991:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9a1:	ff 07 a4 7f ed 77 4a ed fd ff ff df ff ff df ff     .....wJ.........
     9b1:	ff ff ff fb ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9c1:	ff ff ff ff ff ff ff ff ff 07 68 ef fb ff 92 aa     ..........h.....
     9d1:	db ee ff ff 7f f7 ff ff fb ff ed ff fb 7f ff ff     ................
     9e1:	ff ff ff ff ff e7 ff ff ff ff 3f fe ff ff ff ff     ..........?.....
     9f1:	ff 07 d4 fe b6 bf b5 54 ef 7d ff ff ff ff ff bf     .......T.}......
     a01:	f7 fd ff ff ff ff ef ff ff ff ff ff 9f e7 ff ff     ................
     a11:	ff ff 9f fc ff ff ff ff ff 0f d4 fb ef 5d a3 75     .............].u
     a21:	bd ff ff ff f7 ff fe ff ff df ff 7f 7f f7 fe fe     ................
     a31:	ff ff ff 0f 06 06 0e 06 0e fe 9f 07 0e 46 fe ff     .............F..
     a41:	ff 07 a8 be ef ef 16 ad db f6 fb ff ff ff ff ff     ................
     a51:	fb ff fb ff ff ff ff ef ff ff ff e7 9c e7 e4 e4     ................
     a61:	c4 ff 0f e6 e4 04 fc ff ff 0f 58 bf b6 bf 6d 52     ..........X...mR
     a71:	ed df bf ff ff ff ff ff ff ff ef fe ff 7f ff ff     ................
     a81:	ff ff ff e7 9c e7 04 e4 0f fe 9f e7 e7 a4 fc ff     ................
     a91:	ff 0f f0 56 ff f6 cb b4 76 7b ff ff ff ff ff ff     ...V....v{......
     aa1:	f7 fe fd ff ff ff ff ff ff ff ff e7 9c e4 e4 e7     ................
     ab1:	7f fc 9f e7 e7 e4 fc ff ff 1f 00 a8 dd 6f 9f ca     .............o..
     ac1:	ed fe fb f7 ff ff ff ff fd ef ff df ff ff fb ff     ................
     ad1:	ff ff ff 0f 3e e6 0c e6 07 fe 9f e7 0f e6 fc ff     ....>...........
     ae1:	ff 0f 00 90 fb be 75 55 db ef ff ff fe df ff ff     ......uU........
     af1:	ff ff fb ff ef df ff ff ff ff ff ff ff ff ff ff     ................
     b01:	ff ff ff ff ff ff ff ff ff 1f 08 48 ef fb fb aa     ...........H....
     b11:	b6 bd ef ff ff fd b7 fb ff ff df ff ff fb ff ff     ................
     b21:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b31:	ff 0f 00 a8 b6 b7 cf 55 ed f6 7e ff bf ff ff ff     .......U..~.....
     b41:	be 7f ff ff ff ff 7e f7 ff ff ff ff ff ff ff ff     ......~.........
     b51:	ff ff ff ff ff ff ff ff ff 1f 00 40 7d 7f bb af     ...........@}...
     b61:	da df ff ff ff ff 7f ff ff ff fb ff ff ff ff ff     ................
     b71:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b81:	ff 1f 00 d0 ee ed 7f 2d db fe db ff ff ff ff ff     .......-........
     b91:	f7 f7 ff f7 fd ff ff ff ff ff ff ff ff ff ff ff     ................
     ba1:	ff ff ff ff ff ff ff ff ff 0f 00 88 ba bf d5 76     ...............v
     bb1:	b5 b5 ff ef ff ff ef fb ff ff ff ff ff ff ff ff     ................
     bc1:	ff ff ff cf f3 ff ff ff ff ff ff ff ff ff ff ff     ................
     bd1:	ff 1f 00 10 f5 f6 bf 5d da ff fe ff fd ff 7f ff     .......]........
     be1:	ff ff fe ff 7f ff ff ff ff ff ff cf ff ff ff ff     ................
     bf1:	ff ff ff ff ff f9 ff ff ff 1f 00 52 6e 7f db ba     ...........Rn...
     c01:	75 fb ef fe ff ff ff 7f ff ff ef ff ff ff f7 ff     u...............
     c11:	7f e4 e0 c0 f1 e0 60 e0 e0 7f e0 e0 60 e0 e0 ff     ......`.....`...
     c21:	ff 1f 00 a4 da eb bf 75 ed 6f ff ff ff ff fe f7     .......u.o......
     c31:	ff ff ff ff ff df ff de 7f 40 4e ce 73 4e 4e 4e     .........@N.sNNN
     c41:	ce 7f 4e 4e fc 79 fc ff ff 1f 00 4a ed de b6 cd     ..NN.y.....J....
     c51:	aa fe fb ff ff df df ff ff f7 ff ff ff ff ff 7f     ................
     c61:	7f 4a 40 ce 73 4e 7e 7e c0 7f 4e ce e0 f9 e0 ff     .J@.sN~~..N.....
     c71:	ff 1f 00 54 bb f7 6d 55 75 bb 7f f7 df fb ff ee     ...T..mUu.......
     c81:	ef ff ff ef f7 ff ff ff 7f 4e 7e ce 73 4e 7e 7e     .........N~.sN~~
     c91:	fe 7f 4e ce c7 c9 c7 f3 ff 3f 00 a8 76 7b bf 6a     ..N......?..v{.j
     ca1:	db f7 df ff fe ff ff ff fe ff fd ff ff ff ff 57     ...............W
     cb1:	7f ce e0 c0 e1 e0 40 fe e0 7f e0 60 e0 63 e0 f3     ......@....`.c..
     cc1:	ff 3f 00 e2 dd ff df d5 6a 7f fb ff ff ff fb ff     .?......j.......
     cd1:	ff ff ff ff ff fb ff af ff ff ff ff ff ff ff ff     ................
     ce1:	ff 7f fe ff ff ff ff f9 ff 3f 00 48 ff b6 fb 4b     .........?.H...K
     cf1:	b7 ed ff ff ff ff df ed ff ff ff ff ff ff dd 7e     ...............~
     d01:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d11:	ff 3f 00 fa ea ff ff b7 ec fb fe ee ff ff ff ff     .?..............
     d21:	ff ff ff ff ff ff ff d7 ff ff ff ff ff ff ff ff     ................
     d31:	ff ff ff ff ff ff ff ff ff 7f 00 e9 ff ff ff a5     ................
     d41:	dd de ef ff ef ff fb ff ff fb ff fe fe ff ff bf     ................
     d51:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d61:	ff 7f 00 56 bf fd ff af ba f7 fd ff fd 7d df fe     ...V.........}..
     d71:	ff ff df ff bf ff ff ff ff ff ff ff ff ff ff ff     ................
     d81:	ff ff ff ff ff ff ff ff ff 7f 40 fe ea ff df 56     ..........@....V
     d91:	f7 fd ff fd ff ff ff ff ff ff fb ff ff ff ff fb     ................
     da1:	7f fe ff ff ff ff ff ff 7f fe f3 ff ff ff f1 e3     ................
     db1:	ff 7f 80 ff ff ff fb ad aa 6f ef bf ff ff ff ff     .........o......
     dc1:	ff ff ff ff ff ef ff ff 7f fe ff f9 ff ff ff f9     ................
     dd1:	7f fe ff ff ff ff f3 c9 ff 7f 80 3d fd ff bf af     ...........=....
     de1:	76 fb fe ff ff ef bd ff ff ff ff ff ff ff dd df     v...............
     df1:	7f 60 4e e0 7f e0 60 e0 7f e0 71 e4 e0 e0 f3 f9     .`N...`...q.....
     e01:	ff 7f 80 7e ed 77 7f 5b fd dd 7f f7 7f ff ff dd     ...~.w.[........
     e11:	df ff ff ff ff ff ff ff 7f 4e ce f9 7f 4e ce f9     .........N...N..
     e21:	7f ce 73 40 7c ce f3 e0 ff ff 40 eb bb fd db cd     ..s@|.....@.....
     e31:	aa f7 ed ff ef ff ff ff fb ff ff 7f ff ff ff fe     ................
     e41:	7f 4e ce f9 7f 4e ce f9 7f ce 73 ca 60 c0 f3 f9     .N...N....s.`...
     e51:	ff ff 00 95 de df ff 97 76 bf ff ff ff bf fb ff     ........v.......
     e61:	ff ff ff ff ef fd ff f7 7f 4e ce c9 7f 4e ce c9     .........N...N..
     e71:	7f ce 73 ce 47 fe f3 f9 f3 ff 80 58 75 bb b6 6e     ..s.G......Xu..n
     e81:	ed ed ff ff fe ff bf ff ff ff ff ff ff ff ff 7f     ................
     e91:	7f e0 c0 e3 7f ce e0 e3 7f ce 61 4e e0 e0 e1 f9     ..........aN....
     ea1:	f3 ff 00 a0 aa f5 ed 95 da 7b ed fb ff f7 ff fd     .........{......
     eb1:	ff ff ff ff ff bf f7 ff ff ff ff ff ff ff ff ff     ................
     ec1:	ff ff ff ff ff ff ff ff ff ff 40 00 b5 6d df 2e     ..........@..m..
     ed1:	6d df ff ff ff ff ff ff ff 7f ff ff ff ff 7f ef     m...............
     ee1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ef1:	ff ff 41 40 69 db 76 db f4 f6 fe ff ff ff 7d ff     ..A@i.v.......}.
     f01:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f11:	ff ff ff ff ff ff ff ff ff ff 01 a0 96 b6 bb 97     ................
     f21:	ee fb 77 bf df ff ff df ff ff ff ff ff ff ff 7f     ..w.............
     f31:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f41:	ff ff 40 00 6d 6d ef 36 59 6f ff ff ff bf ff ff     ..@.mm.6Yo......
     f51:	ff ff ff 7f ff fd f7 f6 ff ff ff ff ff ff ff ff     ................
     f61:	ff ff ff ff ff ff ff ff ff ff 01 50 a9 b5 dd 6d     ...........P...m
     f71:	fb fe fe ff ff fb bf ff ff ff ff ff df bf ff ff     ................
     f81:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f91:	ff ff 01 a0 52 6a bb db b6 b5 ff ff ff ff ff ff     ....Rj..........
     fa1:	f7 ff bf ff ff ff ff bf ff ff ff ff ff ff ff ff     ................
     fb1:	ff ff ff ff ff ff ff ff ff ff 01 00 d6 d6 76 97     ..............v.
     fc1:	f4 ef ff f7 fd ff ff ff ff fd ff ff ff ff df f7     ................
     fd1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     fe1:	ff ff 03 00 29 ad 6d 6d ab fd ed ff ff ff 7f ef     ....).mm........
     ff1:	ff ff ff ff ff ff fb ff ff ff ff ff ff ff ff ff     ................
    1001:	ff ff ff ff ff ff ff ff ff ff 03 00 d2 da da bb     ................
    1011:	de b6 ff ff bf ff ff ff ff ff ff ef ff f7 ff fe     ................
    1021:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1031:	ff ff 03 80 24 b5 6d db fa ff ff ff ff ff fb ff     ....$.m.........
    1041:	ff ff ff ff f7 7f ff ef ff ff ff ff ff ff ff ff     ................
    1051:	ff ff ff ff ff ff ff ff ff ff 07 00 ac 65 b7 b6     .............e..
    1061:	55 ed ff ff ff 7f ff ff ff ff fb ff ff fe ff 7f     U...............
    1071:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1081:	ff ff 03 00 d9 de da 6d bf 7b ff df fb f7 ff ff     .......m.{......
    1091:	ff ff ff ff ff ff ef fe ff ff ff ff ff ff ff ff     ................
    10a1:	ff ff ff ff ff ff ff ff ff ff 07 80 d2 bf 6d db     ..............m.
    10b1:	fa fe ff fd ff ff ff ff ff ff ff ff ff ff ff f7     ................
    10c1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    10d1:	ff ff 07 00 aa 6a b7 b7 d5 f7 ff ff ff ff ff ff     .....j..........
    10e1:	ff ff ff ff ff df ff bf ff ff ff ff ff ff ff ff     ................
    10f1:	ff ff ff ff ff ff ff ff ff ff 0f 00 69 f7 7e ed     ............i.~.
    1101:	7f df ff ff 7f ff ff ff ff ff ff ff fe ff dd fe     ................
    1111:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1121:	ff ff 0f 00 c4 5e ab 5b fb fe ff ff ff ff ff ff     .....^.[........
    1131:	ff ff ff ff df fd ff ff ff ff ff ff ff ff ff ff     ................
    1141:	ff ff ff ff ff ff ff ff ff ff 0f 00 92 b5 6d bf     ..............m.
    1151:	6d fb ef ff fe ef ff ff ff ff ff f7 ff ff ff b7     m...............
    1161:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1171:	ff ff 1f 00 68 fb 77 f5 df ff ff df ef ff ff ff     ....h.w.........
    1181:	ff ff ff ff ff df f7 ff ff ff ff ff ff ff ff ff     ................
    1191:	ff ff ff ff ff ff ff ff ff ff 1f 00 a4 4e dd 5b     .............N.[
    11a1:	fb ff ff fb ff ff ff ff ff ff ff ff ff ff 7f ff     ................
    11b1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11c1:	ff ff 3f 00 50 bd bb bf 6d ef ff ff ff fd ff ff     ..?.P...m.......
    11d1:	ff ff ff ff ff fd fe db ff ff ff ff ff ff ff ff     ................
    11e1:	ff ff ff ff ff ff ff ff ff ff 3f 80 49 f3 f7 f6     ..........?.I...
    11f1:	ff ff fd ff ff 7f ff ff ff ff ff ff dd ff ef ff     ................
    1201:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1211:	ff ff 7f 00 89 4e dd 6f db fd ff ff ff ff ff ff     .....N.o........
    1221:	ff ff ff fe ff ef ff fe ff ff ff ff ff ff ff ff     ................
    1231:	ff ff ff ff ff ff ff ff ff ff 7f 40 a6 bc ff df     ...........@....
    1241:	f6 ff 7f ff 77 f7 ff ff ff ff ff bf ff ff ff ef     ....w...........
    1251:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1261:	ff ff ff 40 6b f3 ed f6 bf ef ff ff ff ff ff ff     ...@k...........
    1271:	ff ff ff ff ff 7d db ff ff ff ff ff ff ff ff ff     .....}..........
    1281:	ff ff ff ff ff ff ff ff ff ff ff 80 96 d7 fe 6f     ...............o
    1291:	fb fd ff 7f ff ff ff ff ff ff ff ff ff ff ff fd     ................
    12a1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    12b1:	ff ff ff a1 2a ed f7 db ee 7f f7 ff df fd ff ff     ....*...........
    12c1:	ff ff ff ff df ef ff 6f ff ff ff ff ff ff ff ff     .......o........
    12d1:	ff ff ff ff ff ff ff ff ff ff ff 43 dd ba 7f f7     ...........C....
    12e1:	7f fb ff ef ff ff ff ff ff ff ff ff ff fd df ff     ................
    12f1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1301:	ff ff ff a3 ed 77 ff de f6 ed ff ff fb bf ff 7f     .....w..........
    1311:	ff ff ff ff fd ff fe fe ff ff ff ff ff ff ff ff     ................
    1321:	ff ff ff ff ff ff ff ff ff ff ff 4f 5b fd db 6d     ...........O[..m
    1331:	bf 7f 7f ff 7f ff ff ff ff ff ff ef bf ff f7 b7     ................
    1341:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1351:	ff ff ff cf f6 ee bf fb fb fb fb ff ff f7 ff ff     ................
    1361:	ff ff ff ff ff f7 ff ff ff ff ff ff ff ff ff ff     ................
    1371:	ff ff ff ff ff ff ff ff ff ff ff bf fd df 76 d7     ..............v.
    1381:	de ee ff 77 db ff ff ff ff ff ff ff ff bf bf fd     ...w............
    1391:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    13a1:	ff ff ff ff 6f 77 eb be ff bd ff ff ff ff ff ff     ....ow..........
    13b1:	ff ff ff ff dd fe fd ef ff ff ff ff ff ff ff ff     ................
    13c1:	ff ff ff ff ff ff ff ff ff ff ff ff f7 bd df da     ................
    13d1:	bb f7 dd fe ff fd ff ff ff ff ff ff ff f7 ef 7f     ................
    13e1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    13f1:	ff ff ff ff 8f db b6 77 df fe ff df ef ff ff ff     .......w........
    1401:	ff ff ff ff ff ff 7f ff ff ff ff ff ff ff ff ff     ................
    1411:	ff ff ff ff ff ff ff ff ff ff ff ff 5f f6 6d fb     ............_.m.
    1421:	fd ad ff ff fe ff ff ff ff ef ff df f7 be fb db     ................
    1431:	00                                                  .

00001432 <__ctors_end>:
    1432:	11 24       	eor	r1, r1
    1434:	1f be       	out	0x3f, r1	; 63
    1436:	cf ef       	ldi	r28, 0xFF	; 255
    1438:	d0 e2       	ldi	r29, 0x20	; 32
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	cd bf       	out	0x3d, r28	; 61

0000143e <__do_clear_bss>:
    143e:	21 e0       	ldi	r18, 0x01	; 1
    1440:	a0 e0       	ldi	r26, 0x00	; 0
    1442:	b1 e0       	ldi	r27, 0x01	; 1
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <.do_clear_bss_start>

00001446 <.do_clear_bss_loop>:
    1446:	1d 92       	st	X+, r1

00001448 <.do_clear_bss_start>:
    1448:	a0 32       	cpi	r26, 0x20	; 32
    144a:	b2 07       	cpc	r27, r18
    144c:	e1 f7       	brne	.-8      	; 0x1446 <.do_clear_bss_loop>
    144e:	74 d1       	rcall	.+744    	; 0x1738 <main>
    1450:	5e c6       	rjmp	.+3260   	; 0x210e <_exit>

00001452 <__bad_interrupt>:
    1452:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001456 <SetupHardware>:
}

// Configures hardware and peripherals, such as the USB peripherals.
void SetupHardware(void) {
	// We need to disable watchdog if enabled by bootloader/fuses.
	MCUSR &= ~(1 << WDRF);
    1456:	84 b7       	in	r24, 0x34	; 52
    1458:	87 7f       	andi	r24, 0xF7	; 247
    145a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	a8 95       	wdr
    1462:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1466:	88 61       	ori	r24, 0x18	; 24
    1468:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    146c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1470:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	80 e8       	ldi	r24, 0x80	; 128
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    147e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1482:	0f be       	out	0x3f, r0	; 63
                  //We'll just flash all pins on both ports since the UNO R3
	DDRB  = 0xFF; //uses PORTB. Micro can use either or, but both give us 2 LEDs
	PORTB =  0x0; //The ATmega328P on the UNO will be resetting, so unplug it?
	#endif
	// The USB stack should be initialized last.
	USB_Init();
    1484:	bc c3       	rjmp	.+1912   	; 0x1bfe <USB_Init>

00001486 <EVENT_USB_Device_Connect>:
    1486:	08 95       	ret

00001488 <EVENT_USB_Device_Disconnect>:
    1488:	08 95       	ret

0000148a <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    148a:	42 e3       	ldi	r20, 0x32	; 50
    148c:	60 ec       	ldi	r22, 0xC0	; 192
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	ea d2       	rcall	.+1492   	; 0x1a66 <Endpoint_ConfigureEndpoint_Prv>
    1492:	42 e3       	ldi	r20, 0x32	; 50
    1494:	61 ec       	ldi	r22, 0xC1	; 193
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	e6 c2       	rjmp	.+1484   	; 0x1a66 <Endpoint_ConfigureEndpoint_Prv>

0000149a <EVENT_USB_Device_ControlRequest>:

	// We can read ConfigSuccess to indicate a success or failure at this point.
}

// Process control requests sent to the device from the USB host.
void EVENT_USB_Device_ControlRequest(void) {
    149a:	08 95       	ret

0000149c <GetNextReport>:
int xpos = 0;
int ypos = 0;
int portsval = 0;

// Prepare the next report for the host.
void GetNextReport(USB_JoystickReport_Input_t* const ReportData) {
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	ec 01       	movw	r28, r24

	// Prepare an empty report
	memset(ReportData, 0, sizeof(USB_JoystickReport_Input_t));
    14a2:	98 e0       	ldi	r25, 0x08	; 8
    14a4:	fe 01       	movw	r30, r28
    14a6:	29 2f       	mov	r18, r25
    14a8:	11 92       	st	Z+, r1
    14aa:	2a 95       	dec	r18
    14ac:	e9 f7       	brne	.-6      	; 0x14a8 <GetNextReport+0xc>
	ReportData->LX = STICK_CENTER;
    14ae:	80 e8       	ldi	r24, 0x80	; 128
    14b0:	8b 83       	std	Y+3, r24	; 0x03
	ReportData->LY = STICK_CENTER;
    14b2:	8c 83       	std	Y+4, r24	; 0x04
	ReportData->RX = STICK_CENTER;
    14b4:	8d 83       	std	Y+5, r24	; 0x05
	ReportData->RY = STICK_CENTER;
    14b6:	8e 83       	std	Y+6, r24	; 0x06
	ReportData->HAT = HAT_CENTER;
    14b8:	9a 83       	std	Y+2, r25	; 0x02

	// Repeat ECHOES times the last report
	if (echoes > 0)
    14ba:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <echoes>
    14be:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <echoes+0x1>
    14c2:	18 16       	cp	r1, r24
    14c4:	19 06       	cpc	r1, r25
    14c6:	74 f4       	brge	.+28     	; 0x14e4 <GetNextReport+0x48>
	{
		memcpy(ReportData, &last_report, sizeof(USB_JoystickReport_Input_t));
    14c8:	88 e0       	ldi	r24, 0x08	; 8
    14ca:	eb e0       	ldi	r30, 0x0B	; 11
    14cc:	f1 e0       	ldi	r31, 0x01	; 1
    14ce:	de 01       	movw	r26, r28
    14d0:	01 90       	ld	r0, Z+
    14d2:	0d 92       	st	X+, r0
    14d4:	8a 95       	dec	r24
    14d6:	e1 f7       	brne	.-8      	; 0x14d0 <GetNextReport+0x34>
		echoes--;
    14d8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <echoes>
    14dc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <echoes+0x1>
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	db c0       	rjmp	.+438    	; 0x169a <GetNextReport+0x1fe>
		return;
	}

	// States and moves management
	switch (state)
    14e4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state>
    14e8:	83 30       	cpi	r24, 0x03	; 3
    14ea:	09 f4       	brne	.+2      	; 0x14ee <GetNextReport+0x52>
    14ec:	65 c0       	rjmp	.+202    	; 0x15b8 <GetNextReport+0x11c>
    14ee:	20 f4       	brcc	.+8      	; 0x14f8 <GetNextReport+0x5c>
    14f0:	81 30       	cpi	r24, 0x01	; 1
    14f2:	71 f1       	breq	.+92     	; 0x1550 <GetNextReport+0xb4>
    14f4:	50 f0       	brcs	.+20     	; 0x150a <GetNextReport+0x6e>
    14f6:	5e c0       	rjmp	.+188    	; 0x15b4 <GetNextReport+0x118>
    14f8:	85 30       	cpi	r24, 0x05	; 5
    14fa:	09 f4       	brne	.+2      	; 0x14fe <GetNextReport+0x62>
    14fc:	85 c0       	rjmp	.+266    	; 0x1608 <GetNextReport+0x16c>
    14fe:	08 f4       	brcc	.+2      	; 0x1502 <GetNextReport+0x66>
    1500:	66 c0       	rjmp	.+204    	; 0x15ce <GetNextReport+0x132>
    1502:	86 30       	cpi	r24, 0x06	; 6
    1504:	09 f4       	brne	.+2      	; 0x1508 <GetNextReport+0x6c>
    1506:	cd c0       	rjmp	.+410    	; 0x16a2 <GetNextReport+0x206>
    1508:	8d c0       	rjmp	.+282    	; 0x1624 <GetNextReport+0x188>
	{
		case SYNC_CONTROLLER:
			if (report_count > 100)
    150a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <report_count>
    150e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <report_count+0x1>
    1512:	85 36       	cpi	r24, 0x65	; 101
    1514:	91 05       	cpc	r25, r1
    1516:	44 f0       	brlt	.+16     	; 0x1528 <GetNextReport+0x8c>
			{
				report_count = 0;
    1518:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <report_count+0x1>
    151c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <report_count>
				state = SYNC_POSITION;
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
    1526:	3c c0       	rjmp	.+120    	; 0x15a0 <GetNextReport+0x104>
			}
			else if (report_count == 25 || report_count == 50)
    1528:	89 31       	cpi	r24, 0x19	; 25
    152a:	91 05       	cpc	r25, r1
    152c:	19 f0       	breq	.+6      	; 0x1534 <GetNextReport+0x98>
    152e:	82 33       	cpi	r24, 0x32	; 50
    1530:	91 05       	cpc	r25, r1
    1532:	21 f4       	brne	.+8      	; 0x153c <GetNextReport+0xa0>
			{
				ReportData->Button |= SWITCH_L | SWITCH_R;
    1534:	88 81       	ld	r24, Y
    1536:	99 81       	ldd	r25, Y+1	; 0x01
    1538:	80 63       	ori	r24, 0x30	; 48
    153a:	30 c0       	rjmp	.+96     	; 0x159c <GetNextReport+0x100>
			}
			else if (report_count == 75 || report_count == 100)
    153c:	8b 34       	cpi	r24, 0x4B	; 75
    153e:	91 05       	cpc	r25, r1
    1540:	19 f0       	breq	.+6      	; 0x1548 <GetNextReport+0xac>
    1542:	84 36       	cpi	r24, 0x64	; 100
    1544:	91 05       	cpc	r25, r1
    1546:	61 f5       	brne	.+88     	; 0x15a0 <GetNextReport+0x104>
			{
				ReportData->Button |= SWITCH_A;
    1548:	88 81       	ld	r24, Y
    154a:	99 81       	ldd	r25, Y+1	; 0x01
    154c:	84 60       	ori	r24, 0x04	; 4
    154e:	26 c0       	rjmp	.+76     	; 0x159c <GetNextReport+0x100>
			}
			report_count++;
			break;
		case SYNC_POSITION:
			if (report_count == 250)
    1550:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <report_count>
    1554:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <report_count+0x1>
    1558:	8a 3f       	cpi	r24, 0xFA	; 250
    155a:	91 05       	cpc	r25, r1
    155c:	81 f4       	brne	.+32     	; 0x157e <GetNextReport+0xe2>
			{
				report_count = 0;
    155e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <report_count+0x1>
    1562:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <report_count>
				xpos = 0;
    1566:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <xpos+0x1>
    156a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <xpos>
				ypos = 0;
    156e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <ypos+0x1>
    1572:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <ypos>
				state = STOP_X;
    1576:	82 e0       	ldi	r24, 0x02	; 2
    1578:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <GetNextReport+0xe6>
			}
			else
			{
				// Moving faster with LX/LY
				ReportData->LX = STICK_MIN;
    157e:	1b 82       	std	Y+3, r1	; 0x03
				ReportData->LY = STICK_MIN;
    1580:	1c 82       	std	Y+4, r1	; 0x04
			}
			if (report_count == 75 || report_count == 150)
    1582:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <report_count>
    1586:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <report_count+0x1>
    158a:	8b 34       	cpi	r24, 0x4B	; 75
    158c:	91 05       	cpc	r25, r1
    158e:	19 f0       	breq	.+6      	; 0x1596 <GetNextReport+0xfa>
    1590:	86 39       	cpi	r24, 0x96	; 150
    1592:	91 05       	cpc	r25, r1
    1594:	29 f4       	brne	.+10     	; 0x15a0 <GetNextReport+0x104>
			{
				// Clear the screen
				ReportData->Button |= SWITCH_MINUS;
    1596:	88 81       	ld	r24, Y
    1598:	99 81       	ldd	r25, Y+1	; 0x01
    159a:	91 60       	ori	r25, 0x01	; 1
    159c:	99 83       	std	Y+1, r25	; 0x01
    159e:	88 83       	st	Y, r24
			}
			report_count++;
    15a0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <report_count>
    15a4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <report_count+0x1>
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <report_count+0x1>
    15ae:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <report_count>
			break;
    15b2:	38 c0       	rjmp	.+112    	; 0x1624 <GetNextReport+0x188>
		case STOP_X:
			state = MOVE_X;
    15b4:	84 e0       	ldi	r24, 0x04	; 4
    15b6:	34 c0       	rjmp	.+104    	; 0x1620 <GetNextReport+0x184>
			break;
		case STOP_Y:
			if (ypos < 120 - 1)
    15b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ypos>
    15bc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ypos+0x1>
    15c0:	87 37       	cpi	r24, 0x77	; 119
    15c2:	91 05       	cpc	r25, r1
    15c4:	14 f4       	brge	.+4      	; 0x15ca <GetNextReport+0x12e>
				state = MOVE_Y;
    15c6:	85 e0       	ldi	r24, 0x05	; 5
    15c8:	2b c0       	rjmp	.+86     	; 0x1620 <GetNextReport+0x184>
			else
				state = DONE;
    15ca:	86 e0       	ldi	r24, 0x06	; 6
    15cc:	29 c0       	rjmp	.+82     	; 0x1620 <GetNextReport+0x184>
			break;
		case MOVE_X:
			if (ypos % 2)
    15ce:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ypos>
    15d2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <xpos>
    15d6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <xpos+0x1>
    15da:	20 ff       	sbrs	r18, 0
    15dc:	04 c0       	rjmp	.+8      	; 0x15e6 <GetNextReport+0x14a>
			{
				ReportData->HAT = HAT_LEFT;
    15de:	26 e0       	ldi	r18, 0x06	; 6
    15e0:	2a 83       	std	Y+2, r18	; 0x02
				xpos--;
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	03 c0       	rjmp	.+6      	; 0x15ec <GetNextReport+0x150>
			}
			else
			{
				ReportData->HAT = HAT_RIGHT;
    15e6:	22 e0       	ldi	r18, 0x02	; 2
    15e8:	2a 83       	std	Y+2, r18	; 0x02
				xpos++;
    15ea:	01 96       	adiw	r24, 0x01	; 1
    15ec:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <xpos+0x1>
    15f0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <xpos>
			}
			if (xpos > 0 && xpos < 320 - 1)
    15f4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <xpos>
    15f8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <xpos+0x1>
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	8e 33       	cpi	r24, 0x3E	; 62
    1600:	91 40       	sbci	r25, 0x01	; 1
    1602:	68 f0       	brcs	.+26     	; 0x161e <GetNextReport+0x182>
				state = STOP_X;
			else
				state = STOP_Y;
    1604:	83 e0       	ldi	r24, 0x03	; 3
    1606:	0c c0       	rjmp	.+24     	; 0x1620 <GetNextReport+0x184>
			break;
		case MOVE_Y:
			ReportData->HAT = HAT_BOTTOM;
    1608:	84 e0       	ldi	r24, 0x04	; 4
    160a:	8a 83       	std	Y+2, r24	; 0x02
			ypos++;
    160c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ypos>
    1610:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ypos+0x1>
    1614:	01 96       	adiw	r24, 0x01	; 1
    1616:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ypos+0x1>
    161a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ypos>
			state = STOP_X;
    161e:	82 e0       	ldi	r24, 0x02	; 2
    1620:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
			#endif
			return;
	}

	// Inking
	if (state != SYNC_CONTROLLER && state != SYNC_POSITION)
    1624:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state>
    1628:	82 30       	cpi	r24, 0x02	; 2
    162a:	68 f1       	brcs	.+90     	; 0x1686 <GetNextReport+0x1ea>
		if (pgm_read_byte(&(image_data[(xpos / 8) + (ypos * 40)])) & 1 << (xpos % 8))
    162c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <xpos>
    1630:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <xpos+0x1>
    1634:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ypos>
    1638:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <ypos+0x1>
    163c:	48 e2       	ldi	r20, 0x28	; 40
    163e:	42 9f       	mul	r20, r18
    1640:	f0 01       	movw	r30, r0
    1642:	43 9f       	mul	r20, r19
    1644:	f0 0d       	add	r31, r0
    1646:	11 24       	eor	r1, r1
    1648:	9c 01       	movw	r18, r24
    164a:	97 ff       	sbrs	r25, 7
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <GetNextReport+0x1b6>
    164e:	29 5f       	subi	r18, 0xF9	; 249
    1650:	3f 4f       	sbci	r19, 0xFF	; 255
    1652:	43 e0       	ldi	r20, 0x03	; 3
    1654:	35 95       	asr	r19
    1656:	27 95       	ror	r18
    1658:	4a 95       	dec	r20
    165a:	e1 f7       	brne	.-8      	; 0x1654 <GetNextReport+0x1b8>
    165c:	e2 0f       	add	r30, r18
    165e:	f3 1f       	adc	r31, r19
    1660:	ef 58       	subi	r30, 0x8F	; 143
    1662:	fe 4f       	sbci	r31, 0xFE	; 254
    1664:	e4 91       	lpm	r30, Z
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	68 e0       	ldi	r22, 0x08	; 8
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	29 d5       	rcall	.+2642   	; 0x20c0 <__divmodhi4>
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <GetNextReport+0x1d8>
    1670:	f5 95       	asr	r31
    1672:	e7 95       	ror	r30
    1674:	8a 95       	dec	r24
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <GetNextReport+0x1d4>
    1678:	e0 ff       	sbrs	r30, 0
    167a:	05 c0       	rjmp	.+10     	; 0x1686 <GetNextReport+0x1ea>
			ReportData->Button |= SWITCH_A;
    167c:	88 81       	ld	r24, Y
    167e:	99 81       	ldd	r25, Y+1	; 0x01
    1680:	84 60       	ori	r24, 0x04	; 4
    1682:	99 83       	std	Y+1, r25	; 0x01
    1684:	88 83       	st	Y, r24

	// Prepare to echo this report
	memcpy(&last_report, ReportData, sizeof(USB_JoystickReport_Input_t));
    1686:	88 e0       	ldi	r24, 0x08	; 8
    1688:	fe 01       	movw	r30, r28
    168a:	ab e0       	ldi	r26, 0x0B	; 11
    168c:	b1 e0       	ldi	r27, 0x01	; 1
    168e:	01 90       	ld	r0, Z+
    1690:	0d 92       	st	X+, r0
    1692:	8a 95       	dec	r24
    1694:	e1 f7       	brne	.-8      	; 0x168e <GetNextReport+0x1f2>
	echoes = ECHOES;
    1696:	82 e0       	ldi	r24, 0x02	; 2
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <echoes+0x1>
    169e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <echoes>

}
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	08 95       	ret

000016a8 <HID_Task>:

	// Not used here, it looks like we don't receive control request from the Switch.
}

// Process and deliver data from IN and OUT endpoints.
void HID_Task(void) {
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	28 97       	sbiw	r28, 0x08	; 8
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
	// If the device isn't connected and properly configured, we can't do anything here.
	if (USB_DeviceState != DEVICE_STATE_Configured)
    16bc:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_DeviceState>
    16c0:	84 30       	cpi	r24, 0x04	; 4
    16c2:	89 f5       	brne	.+98     	; 0x1726 <HID_Task+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16c4:	82 e0       	ldi	r24, 0x02	; 2
    16c6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    16ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		return;

	// We'll start with the OUT endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_OUT_EPADDR);
	// We'll check to see if we received something on the OUT endpoint.
	if (Endpoint_IsOUTReceived())
    16ce:	82 ff       	sbrs	r24, 2
    16d0:	12 c0       	rjmp	.+36     	; 0x16f6 <HID_Task+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		// If we did, and the packet has data, we'll react to it.
		if (Endpoint_IsReadWriteAllowed())
    16d6:	85 ff       	sbrs	r24, 5
    16d8:	09 c0       	rjmp	.+18     	; 0x16ec <HID_Task+0x44>
		{
			// We'll create a place to store our data received from the host.
			USB_JoystickReport_Output_t JoystickOutputData;
			// We'll then take in that data, setting it up in our storage.
			while(Endpoint_Read_Stream_LE(&JoystickOutputData, sizeof(JoystickOutputData), NULL) != ENDPOINT_RWSTREAM_NoError);
    16da:	40 e0       	ldi	r20, 0x00	; 0
    16dc:	50 e0       	ldi	r21, 0x00	; 0
    16de:	67 e0       	ldi	r22, 0x07	; 7
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	ce 01       	movw	r24, r28
    16e4:	01 96       	adiw	r24, 0x01	; 1
    16e6:	b8 d0       	rcall	.+368    	; 0x1858 <Endpoint_Read_Stream_LE>
    16e8:	81 11       	cpse	r24, r1
    16ea:	f7 cf       	rjmp	.-18     	; 0x16da <HID_Task+0x32>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    16ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16f0:	8b 77       	andi	r24, 0x7B	; 123
    16f2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	}

	// We'll then move on to the IN endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_IN_EPADDR);
	// We first check to see if the host is ready to accept data.
	if (Endpoint_IsINReady())
    1700:	80 ff       	sbrs	r24, 0
    1702:	11 c0       	rjmp	.+34     	; 0x1726 <HID_Task+0x7e>
	{
		// We'll create an empty report.
		USB_JoystickReport_Input_t JoystickInputData;
		// We'll then populate this report with what we want to send to the host.
		GetNextReport(&JoystickInputData);
    1704:	ce 01       	movw	r24, r28
    1706:	01 96       	adiw	r24, 0x01	; 1
    1708:	c9 de       	rcall	.-622    	; 0x149c <GetNextReport>
		// Once populated, we can output this data to the host. We do this by first writing the data to the control stream.
		while(Endpoint_Write_Stream_LE(&JoystickInputData, sizeof(JoystickInputData), NULL) != ENDPOINT_RWSTREAM_NoError);
    170a:	40 e0       	ldi	r20, 0x00	; 0
    170c:	50 e0       	ldi	r21, 0x00	; 0
    170e:	68 e0       	ldi	r22, 0x08	; 8
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	ce 01       	movw	r24, r28
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	56 d0       	rcall	.+172    	; 0x17c4 <Endpoint_Write_Stream_LE>
    1718:	81 11       	cpse	r24, r1
    171a:	f7 cf       	rjmp	.-18     	; 0x170a <HID_Task+0x62>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    171c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1720:	8e 77       	andi	r24, 0x7E	; 126
    1722:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		// We then send an IN packet on this endpoint.
		Endpoint_ClearIN();
	}
}
    1726:	28 96       	adiw	r28, 0x08	; 8
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	08 95       	ret

00001738 <main>:
extern const uint8_t image_data[0x12c1] PROGMEM;

// Main entry point.
int main(void) {
	// We'll start by performing hardware and peripheral setup.
	SetupHardware();
    1738:	8e de       	rcall	.-740    	; 0x1456 <SetupHardware>
	GlobalInterruptEnable();
	// Once that's done, we'll enter an infinite loop.
	for (;;)
	{
		// We need to run our task to process and deliver data for our IN and OUT endpoints.
		HID_Task();
    173a:	78 94       	sei
		// We also need to run the main USB management task.
		USB_USBTask();
    173c:	b5 df       	rcall	.-150    	; 0x16a8 <HID_Task>
    173e:	a6 d4       	rcall	.+2380   	; 0x208c <USB_USBTask>
    1740:	fd cf       	rjmp	.-6      	; 0x173c <main+0x4>

00001742 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    1742:	29 2f       	mov	r18, r25
    1744:	33 27       	eor	r19, r19
    1746:	23 30       	cpi	r18, 0x03	; 3
    1748:	31 05       	cpc	r19, r1
    174a:	e1 f0       	breq	.+56     	; 0x1784 <CALLBACK_USB_GetDescriptor+0x42>
    174c:	58 f4       	brcc	.+22     	; 0x1764 <CALLBACK_USB_GetDescriptor+0x22>
    174e:	21 30       	cpi	r18, 0x01	; 1
    1750:	31 05       	cpc	r19, r1
    1752:	99 f0       	breq	.+38     	; 0x177a <CALLBACK_USB_GetDescriptor+0x38>
    1754:	22 30       	cpi	r18, 0x02	; 2
    1756:	31 05       	cpc	r19, r1
    1758:	69 f5       	brne	.+90     	; 0x17b4 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    175a:	89 e2       	ldi	r24, 0x29	; 41
    175c:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    175e:	20 ee       	ldi	r18, 0xE0	; 224
    1760:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    1762:	2c c0       	rjmp	.+88     	; 0x17bc <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    1764:	21 32       	cpi	r18, 0x21	; 33
    1766:	31 05       	cpc	r19, r1
    1768:	01 f1       	breq	.+64     	; 0x17aa <CALLBACK_USB_GetDescriptor+0x68>
    176a:	22 32       	cpi	r18, 0x22	; 34
    176c:	31 05       	cpc	r19, r1
    176e:	11 f5       	brne	.+68     	; 0x17b4 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
    1770:	86 e5       	ldi	r24, 0x56	; 86
    1772:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
    1774:	2b e1       	ldi	r18, 0x1B	; 27
    1776:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(JoystickReport);
			break;
    1778:	21 c0       	rjmp	.+66     	; 0x17bc <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    177a:	82 e1       	ldi	r24, 0x12	; 18
    177c:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    177e:	29 e0       	ldi	r18, 0x09	; 9
    1780:	31 e0       	ldi	r19, 0x01	; 1
    1782:	1c c0       	rjmp	.+56     	; 0x17bc <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
    1784:	99 27       	eor	r25, r25
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	91 05       	cpc	r25, r1
    178a:	49 f0       	breq	.+18     	; 0x179e <CALLBACK_USB_GetDescriptor+0x5c>
    178c:	28 f0       	brcs	.+10     	; 0x1798 <CALLBACK_USB_GetDescriptor+0x56>
    178e:	02 97       	sbiw	r24, 0x02	; 2
    1790:	89 f4       	brne	.+34     	; 0x17b4 <CALLBACK_USB_GetDescriptor+0x72>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    1792:	e8 e9       	ldi	r30, 0x98	; 152
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	05 c0       	rjmp	.+10     	; 0x17a2 <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    1798:	ec ed       	ldi	r30, 0xDC	; 220
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    179e:	ee eb       	ldi	r30, 0xBE	; 190
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    17a2:	84 91       	lpm	r24, Z
    17a4:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    17a6:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    17a8:	09 c0       	rjmp	.+18     	; 0x17bc <CALLBACK_USB_GetDescriptor+0x7a>
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
    17aa:	89 e0       	ldi	r24, 0x09	; 9
    17ac:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
    17ae:	22 ef       	ldi	r18, 0xF2	; 242
    17b0:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
    17b2:	04 c0       	rjmp	.+8      	; 0x17bc <CALLBACK_USB_GetDescriptor+0x7a>
) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
	const void** const DescriptorAddress
) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
    17bc:	fa 01       	movw	r30, r20
    17be:	31 83       	std	Z+1, r19	; 0x01
    17c0:	20 83       	st	Z, r18
	return Size;
}
    17c2:	08 95       	ret

000017c4 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    17c4:	cf 92       	push	r12
    17c6:	df 92       	push	r13
    17c8:	ef 92       	push	r14
    17ca:	ff 92       	push	r15
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	ec 01       	movw	r28, r24
    17d6:	8b 01       	movw	r16, r22
    17d8:	7a 01       	movw	r14, r20
    17da:	99 d1       	rcall	.+818    	; 0x1b0e <Endpoint_WaitUntilReady>
    17dc:	81 11       	cpse	r24, r1
    17de:	33 c0       	rjmp	.+102    	; 0x1846 <Endpoint_Write_Stream_LE+0x82>
    17e0:	e1 14       	cp	r14, r1
    17e2:	f1 04       	cpc	r15, r1
    17e4:	39 f0       	breq	.+14     	; 0x17f4 <Endpoint_Write_Stream_LE+0x30>
    17e6:	f7 01       	movw	r30, r14
    17e8:	80 81       	ld	r24, Z
    17ea:	91 81       	ldd	r25, Z+1	; 0x01
    17ec:	08 1b       	sub	r16, r24
    17ee:	19 0b       	sbc	r17, r25
    17f0:	c8 0f       	add	r28, r24
    17f2:	d9 1f       	adc	r29, r25
    17f4:	c1 2c       	mov	r12, r1
    17f6:	d1 2c       	mov	r13, r1
    17f8:	01 15       	cp	r16, r1
    17fa:	11 05       	cpc	r17, r1
    17fc:	19 f1       	breq	.+70     	; 0x1844 <Endpoint_Write_Stream_LE+0x80>
    17fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1802:	85 fd       	sbrc	r24, 5
    1804:	16 c0       	rjmp	.+44     	; 0x1832 <Endpoint_Write_Stream_LE+0x6e>
    1806:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    180a:	8e 77       	andi	r24, 0x7E	; 126
    180c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1810:	3d d4       	rcall	.+2170   	; 0x208c <USB_USBTask>
    1812:	e1 14       	cp	r14, r1
    1814:	f1 04       	cpc	r15, r1
    1816:	49 f0       	breq	.+18     	; 0x182a <Endpoint_Write_Stream_LE+0x66>
    1818:	f7 01       	movw	r30, r14
    181a:	80 81       	ld	r24, Z
    181c:	91 81       	ldd	r25, Z+1	; 0x01
    181e:	c8 0e       	add	r12, r24
    1820:	d9 1e       	adc	r13, r25
    1822:	d1 82       	std	Z+1, r13	; 0x01
    1824:	c0 82       	st	Z, r12
    1826:	85 e0       	ldi	r24, 0x05	; 5
    1828:	0e c0       	rjmp	.+28     	; 0x1846 <Endpoint_Write_Stream_LE+0x82>
    182a:	71 d1       	rcall	.+738    	; 0x1b0e <Endpoint_WaitUntilReady>
    182c:	88 23       	and	r24, r24
    182e:	21 f3       	breq	.-56     	; 0x17f8 <Endpoint_Write_Stream_LE+0x34>
    1830:	0a c0       	rjmp	.+20     	; 0x1846 <Endpoint_Write_Stream_LE+0x82>
    1832:	89 91       	ld	r24, Y+
    1834:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1838:	01 50       	subi	r16, 0x01	; 1
    183a:	11 09       	sbc	r17, r1
    183c:	ff ef       	ldi	r31, 0xFF	; 255
    183e:	cf 1a       	sub	r12, r31
    1840:	df 0a       	sbc	r13, r31
    1842:	da cf       	rjmp	.-76     	; 0x17f8 <Endpoint_Write_Stream_LE+0x34>
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	1f 91       	pop	r17
    184c:	0f 91       	pop	r16
    184e:	ff 90       	pop	r15
    1850:	ef 90       	pop	r14
    1852:	df 90       	pop	r13
    1854:	cf 90       	pop	r12
    1856:	08 95       	ret

00001858 <Endpoint_Read_Stream_LE>:
    1858:	cf 92       	push	r12
    185a:	df 92       	push	r13
    185c:	ef 92       	push	r14
    185e:	ff 92       	push	r15
    1860:	0f 93       	push	r16
    1862:	1f 93       	push	r17
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	ec 01       	movw	r28, r24
    186a:	8b 01       	movw	r16, r22
    186c:	7a 01       	movw	r14, r20
    186e:	4f d1       	rcall	.+670    	; 0x1b0e <Endpoint_WaitUntilReady>
    1870:	81 11       	cpse	r24, r1
    1872:	33 c0       	rjmp	.+102    	; 0x18da <Endpoint_Read_Stream_LE+0x82>
    1874:	e1 14       	cp	r14, r1
    1876:	f1 04       	cpc	r15, r1
    1878:	39 f0       	breq	.+14     	; 0x1888 <Endpoint_Read_Stream_LE+0x30>
    187a:	f7 01       	movw	r30, r14
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
    1880:	08 1b       	sub	r16, r24
    1882:	19 0b       	sbc	r17, r25
    1884:	c8 0f       	add	r28, r24
    1886:	d9 1f       	adc	r29, r25
    1888:	c1 2c       	mov	r12, r1
    188a:	d1 2c       	mov	r13, r1
    188c:	01 15       	cp	r16, r1
    188e:	11 05       	cpc	r17, r1
    1890:	19 f1       	breq	.+70     	; 0x18d8 <Endpoint_Read_Stream_LE+0x80>
    1892:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1896:	85 fd       	sbrc	r24, 5
    1898:	16 c0       	rjmp	.+44     	; 0x18c6 <Endpoint_Read_Stream_LE+0x6e>
    189a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    189e:	8b 77       	andi	r24, 0x7B	; 123
    18a0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18a4:	f3 d3       	rcall	.+2022   	; 0x208c <USB_USBTask>
    18a6:	e1 14       	cp	r14, r1
    18a8:	f1 04       	cpc	r15, r1
    18aa:	49 f0       	breq	.+18     	; 0x18be <Endpoint_Read_Stream_LE+0x66>
    18ac:	f7 01       	movw	r30, r14
    18ae:	80 81       	ld	r24, Z
    18b0:	91 81       	ldd	r25, Z+1	; 0x01
    18b2:	c8 0e       	add	r12, r24
    18b4:	d9 1e       	adc	r13, r25
    18b6:	d1 82       	std	Z+1, r13	; 0x01
    18b8:	c0 82       	st	Z, r12
    18ba:	85 e0       	ldi	r24, 0x05	; 5
    18bc:	0e c0       	rjmp	.+28     	; 0x18da <Endpoint_Read_Stream_LE+0x82>
    18be:	27 d1       	rcall	.+590    	; 0x1b0e <Endpoint_WaitUntilReady>
    18c0:	88 23       	and	r24, r24
    18c2:	21 f3       	breq	.-56     	; 0x188c <Endpoint_Read_Stream_LE+0x34>
    18c4:	0a c0       	rjmp	.+20     	; 0x18da <Endpoint_Read_Stream_LE+0x82>
    18c6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    18ca:	89 93       	st	Y+, r24
    18cc:	01 50       	subi	r16, 0x01	; 1
    18ce:	11 09       	sbc	r17, r1
    18d0:	ff ef       	ldi	r31, 0xFF	; 255
    18d2:	cf 1a       	sub	r12, r31
    18d4:	df 0a       	sbc	r13, r31
    18d6:	da cf       	rjmp	.-76     	; 0x188c <Endpoint_Read_Stream_LE+0x34>
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	1f 91       	pop	r17
    18e0:	0f 91       	pop	r16
    18e2:	ff 90       	pop	r15
    18e4:	ef 90       	pop	r14
    18e6:	df 90       	pop	r13
    18e8:	cf 90       	pop	r12
    18ea:	08 95       	ret

000018ec <Endpoint_Write_Control_Stream_LE>:
    18ec:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <USB_ControlRequest+0x6>
    18f0:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <USB_ControlRequest+0x7>
    18f4:	26 17       	cp	r18, r22
    18f6:	37 07       	cpc	r19, r23
    18f8:	48 f0       	brcs	.+18     	; 0x190c <Endpoint_Write_Control_Stream_LE+0x20>
    18fa:	61 15       	cp	r22, r1
    18fc:	71 05       	cpc	r23, r1
    18fe:	39 f4       	brne	.+14     	; 0x190e <Endpoint_Write_Control_Stream_LE+0x22>
    1900:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1904:	2e 77       	andi	r18, 0x7E	; 126
    1906:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    190a:	01 c0       	rjmp	.+2      	; 0x190e <Endpoint_Write_Control_Stream_LE+0x22>
    190c:	b9 01       	movw	r22, r18
    190e:	fc 01       	movw	r30, r24
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	61 15       	cp	r22, r1
    1914:	71 05       	cpc	r23, r1
    1916:	71 f1       	breq	.+92     	; 0x1974 <Endpoint_Write_Control_Stream_LE+0x88>
    1918:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_DeviceState>
    191c:	88 23       	and	r24, r24
    191e:	e9 f1       	breq	.+122    	; 0x199a <Endpoint_Write_Control_Stream_LE+0xae>
    1920:	85 30       	cpi	r24, 0x05	; 5
    1922:	e9 f1       	breq	.+122    	; 0x199e <Endpoint_Write_Control_Stream_LE+0xb2>
    1924:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1928:	83 fd       	sbrc	r24, 3
    192a:	3b c0       	rjmp	.+118    	; 0x19a2 <Endpoint_Write_Control_Stream_LE+0xb6>
    192c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1930:	82 fd       	sbrc	r24, 2
    1932:	2d c0       	rjmp	.+90     	; 0x198e <Endpoint_Write_Control_Stream_LE+0xa2>
    1934:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1938:	80 ff       	sbrs	r24, 0
    193a:	eb cf       	rjmp	.-42     	; 0x1912 <Endpoint_Write_Control_Stream_LE+0x26>
    193c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1940:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1944:	61 15       	cp	r22, r1
    1946:	71 05       	cpc	r23, r1
    1948:	51 f0       	breq	.+20     	; 0x195e <Endpoint_Write_Control_Stream_LE+0x72>
    194a:	80 34       	cpi	r24, 0x40	; 64
    194c:	91 05       	cpc	r25, r1
    194e:	38 f4       	brcc	.+14     	; 0x195e <Endpoint_Write_Control_Stream_LE+0x72>
    1950:	21 91       	ld	r18, Z+
    1952:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1956:	61 50       	subi	r22, 0x01	; 1
    1958:	71 09       	sbc	r23, r1
    195a:	01 96       	adiw	r24, 0x01	; 1
    195c:	f3 cf       	rjmp	.-26     	; 0x1944 <Endpoint_Write_Control_Stream_LE+0x58>
    195e:	21 e0       	ldi	r18, 0x01	; 1
    1960:	80 34       	cpi	r24, 0x40	; 64
    1962:	91 05       	cpc	r25, r1
    1964:	09 f0       	breq	.+2      	; 0x1968 <Endpoint_Write_Control_Stream_LE+0x7c>
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    196c:	8e 77       	andi	r24, 0x7E	; 126
    196e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1972:	cf cf       	rjmp	.-98     	; 0x1912 <Endpoint_Write_Control_Stream_LE+0x26>
    1974:	21 11       	cpse	r18, r1
    1976:	d0 cf       	rjmp	.-96     	; 0x1918 <Endpoint_Write_Control_Stream_LE+0x2c>
    1978:	0a c0       	rjmp	.+20     	; 0x198e <Endpoint_Write_Control_Stream_LE+0xa2>
    197a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_DeviceState>
    197e:	88 23       	and	r24, r24
    1980:	61 f0       	breq	.+24     	; 0x199a <Endpoint_Write_Control_Stream_LE+0xae>
    1982:	85 30       	cpi	r24, 0x05	; 5
    1984:	61 f0       	breq	.+24     	; 0x199e <Endpoint_Write_Control_Stream_LE+0xb2>
    1986:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    198a:	83 fd       	sbrc	r24, 3
    198c:	0a c0       	rjmp	.+20     	; 0x19a2 <Endpoint_Write_Control_Stream_LE+0xb6>
    198e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1992:	82 ff       	sbrs	r24, 2
    1994:	f2 cf       	rjmp	.-28     	; 0x197a <Endpoint_Write_Control_Stream_LE+0x8e>
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	08 95       	ret
    199a:	82 e0       	ldi	r24, 0x02	; 2
    199c:	08 95       	ret
    199e:	83 e0       	ldi	r24, 0x03	; 3
    19a0:	08 95       	ret
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	08 95       	ret

000019a6 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    19a6:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <USB_ControlRequest+0x6>
    19aa:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <USB_ControlRequest+0x7>
    19ae:	26 17       	cp	r18, r22
    19b0:	37 07       	cpc	r19, r23
    19b2:	48 f0       	brcs	.+18     	; 0x19c6 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    19b4:	61 15       	cp	r22, r1
    19b6:	71 05       	cpc	r23, r1
    19b8:	39 f4       	brne	.+14     	; 0x19c8 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19ba:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19be:	2e 77       	andi	r18, 0x7E	; 126
    19c0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <Endpoint_Write_Control_PStream_LE+0x22>
    19c6:	b9 01       	movw	r22, r18
    19c8:	fc 01       	movw	r30, r24
    19ca:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19cc:	61 15       	cp	r22, r1
    19ce:	71 05       	cpc	r23, r1
    19d0:	89 f1       	breq	.+98     	; 0x1a34 <Endpoint_Write_Control_PStream_LE+0x8e>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19d2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19d6:	88 23       	and	r24, r24
    19d8:	09 f4       	brne	.+2      	; 0x19dc <Endpoint_Write_Control_PStream_LE+0x36>
    19da:	3f c0       	rjmp	.+126    	; 0x1a5a <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19dc:	85 30       	cpi	r24, 0x05	; 5
    19de:	09 f4       	brne	.+2      	; 0x19e2 <Endpoint_Write_Control_PStream_LE+0x3c>
    19e0:	3e c0       	rjmp	.+124    	; 0x1a5e <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19e6:	83 fd       	sbrc	r24, 3
    19e8:	3c c0       	rjmp	.+120    	; 0x1a62 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    19ee:	82 fd       	sbrc	r24, 2
    19f0:	2e c0       	rjmp	.+92     	; 0x1a4e <Endpoint_Write_Control_PStream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
    19f6:	80 ff       	sbrs	r24, 0
    19f8:	e9 cf       	rjmp	.-46     	; 0x19cc <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    19fa:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    19fe:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a02:	61 15       	cp	r22, r1
    1a04:	71 05       	cpc	r23, r1
    1a06:	59 f0       	breq	.+22     	; 0x1a1e <Endpoint_Write_Control_PStream_LE+0x78>
    1a08:	80 34       	cpi	r24, 0x40	; 64
    1a0a:	91 05       	cpc	r25, r1
    1a0c:	40 f4       	brcc	.+16     	; 0x1a1e <Endpoint_Write_Control_PStream_LE+0x78>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a0e:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a10:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1a14:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1a16:	61 50       	subi	r22, 0x01	; 1
    1a18:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	f2 cf       	rjmp	.-28     	; 0x1a02 <Endpoint_Write_Control_PStream_LE+0x5c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1a1e:	21 e0       	ldi	r18, 0x01	; 1
    1a20:	80 34       	cpi	r24, 0x40	; 64
    1a22:	91 05       	cpc	r25, r1
    1a24:	09 f0       	breq	.+2      	; 0x1a28 <Endpoint_Write_Control_PStream_LE+0x82>
    1a26:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a28:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a2c:	8e 77       	andi	r24, 0x7E	; 126
    1a2e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a32:	cc cf       	rjmp	.-104    	; 0x19cc <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a34:	21 11       	cpse	r18, r1
    1a36:	cd cf       	rjmp	.-102    	; 0x19d2 <Endpoint_Write_Control_PStream_LE+0x2c>
    1a38:	0a c0       	rjmp	.+20     	; 0x1a4e <Endpoint_Write_Control_PStream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a3a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a3e:	88 23       	and	r24, r24
    1a40:	61 f0       	breq	.+24     	; 0x1a5a <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a42:	85 30       	cpi	r24, 0x05	; 5
    1a44:	61 f0       	breq	.+24     	; 0x1a5e <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a4a:	83 fd       	sbrc	r24, 3
    1a4c:	0a c0       	rjmp	.+20     	; 0x1a62 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1a52:	82 ff       	sbrs	r24, 2
    1a54:	f2 cf       	rjmp	.-28     	; 0x1a3a <Endpoint_Write_Control_PStream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a5a:	82 e0       	ldi	r24, 0x02	; 2
    1a5c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a5e:	83 e0       	ldi	r24, 0x03	; 3
    1a60:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1a64:	08 95       	ret

00001a66 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1a66:	98 2f       	mov	r25, r24
    1a68:	97 30       	cpi	r25, 0x07	; 7
    1a6a:	68 f5       	brcc	.+90     	; 0x1ac6 <Endpoint_ConfigureEndpoint_Prv+0x60>
    1a6c:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1a70:	98 17       	cp	r25, r24
    1a72:	39 f0       	breq	.+14     	; 0x1a82 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    1a74:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1a78:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1a7c:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1a80:	03 c0       	rjmp	.+6      	; 0x1a88 <Endpoint_ConfigureEndpoint_Prv+0x22>
    1a82:	24 2f       	mov	r18, r20
    1a84:	76 2f       	mov	r23, r22
    1a86:	50 e0       	ldi	r21, 0x00	; 0
    1a88:	21 fd       	sbrc	r18, 1
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <Endpoint_ConfigureEndpoint_Prv+0x2a>
    1a8c:	9f 5f       	subi	r25, 0xFF	; 255
    1a8e:	ec cf       	rjmp	.-40     	; 0x1a68 <Endpoint_ConfigureEndpoint_Prv+0x2>
    1a90:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1a94:	3e 7f       	andi	r19, 0xFE	; 254
    1a96:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1a9a:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1a9e:	3d 7f       	andi	r19, 0xFD	; 253
    1aa0:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1aa4:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1aa8:	31 60       	ori	r19, 0x01	; 1
    1aaa:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1aae:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1ab2:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1ab6:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1aba:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1abe:	27 fd       	sbrc	r18, 7
    1ac0:	e5 cf       	rjmp	.-54     	; 0x1a8c <Endpoint_ConfigureEndpoint_Prv+0x26>
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	08 95       	ret
    1ac6:	8f 70       	andi	r24, 0x0F	; 15
    1ac8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	08 95       	ret

00001ad0 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1ad0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_ControlRequest>
    1ad4:	87 ff       	sbrs	r24, 7
    1ad6:	11 c0       	rjmp	.+34     	; 0x1afa <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ad8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    1adc:	82 fd       	sbrc	r24, 2
    1ade:	05 c0       	rjmp	.+10     	; 0x1aea <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1ae0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_DeviceState>
    1ae4:	81 11       	cpse	r24, r1
    1ae6:	f8 cf       	rjmp	.-16     	; 0x1ad8 <Endpoint_ClearStatusStage+0x8>
    1ae8:	11 c0       	rjmp	.+34     	; 0x1b0c <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1aea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1aee:	8b 77       	andi	r24, 0x7B	; 123
    1af0:	0b c0       	rjmp	.+22     	; 0x1b08 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1af2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_DeviceState>
    1af6:	88 23       	and	r24, r24
    1af8:	49 f0       	breq	.+18     	; 0x1b0c <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1afa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1afe:	80 ff       	sbrs	r24, 0
    1b00:	f8 cf       	rjmp	.-16     	; 0x1af2 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b06:	8e 77       	andi	r24, 0x7E	; 126
    1b08:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b0c:	08 95       	ret

00001b0e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1b0e:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1b12:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    1b16:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1b18:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1b1c:	84 2f       	mov	r24, r20
    1b1e:	81 70       	andi	r24, 0x01	; 1
    1b20:	40 ff       	sbrs	r20, 0
    1b22:	23 c0       	rjmp	.+70     	; 0x1b6a <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1b28:	80 fd       	sbrc	r24, 0
    1b2a:	1d c0       	rjmp	.+58     	; 0x1b66 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b2c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b30:	88 23       	and	r24, r24
    1b32:	99 f0       	breq	.+38     	; 0x1b5a <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b34:	85 30       	cpi	r24, 0x05	; 5
    1b36:	99 f0       	breq	.+38     	; 0x1b5e <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1b38:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1b3c:	85 fd       	sbrc	r24, 5
    1b3e:	11 c0       	rjmp	.+34     	; 0x1b62 <Endpoint_WaitUntilReady+0x54>
    1b40:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1b44:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1b48:	24 17       	cp	r18, r20
    1b4a:	35 07       	cpc	r19, r21
    1b4c:	29 f3       	breq	.-54     	; 0x1b18 <Endpoint_WaitUntilReady+0xa>
    1b4e:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1b50:	11 f0       	breq	.+4      	; 0x1b56 <Endpoint_WaitUntilReady+0x48>
    1b52:	9a 01       	movw	r18, r20
    1b54:	e1 cf       	rjmp	.-62     	; 0x1b18 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1b56:	84 e0       	ldi	r24, 0x04	; 4
    1b58:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1b5a:	82 e0       	ldi	r24, 0x02	; 2
    1b5c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1b5e:	83 e0       	ldi	r24, 0x03	; 3
    1b60:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b6a:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1b6e:	42 ff       	sbrs	r20, 2
    1b70:	dd cf       	rjmp	.-70     	; 0x1b2c <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1b72:	08 95       	ret

00001b74 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1b74:	0f 93       	push	r16
    1b76:	1f 93       	push	r17
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1b7c:	4e d0       	rcall	.+156    	; 0x1c1a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b7e:	55 d0       	rcall	.+170    	; 0x1c2a <USB_INT_ClearAllInterrupts>
    1b80:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1b82:	d0 e0       	ldi	r29, 0x00	; 0
    1b84:	88 81       	ld	r24, Y
    1b86:	8f 77       	andi	r24, 0x7F	; 127
    1b88:	88 83       	st	Y, r24
    1b8a:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    1b8c:	80 68       	ori	r24, 0x80	; 128
    1b8e:	88 83       	st	Y, r24
    1b90:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1b92:	8f 7d       	andi	r24, 0xDF	; 223
    1b94:	88 83       	st	Y, r24
    1b96:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	80 68       	ori	r24, 0x80	; 128
    1b9e:	80 83       	st	Z, r24
    1ba0:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1ba2:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1ba6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    1baa:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1bae:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1bb2:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1bb4:	10 e0       	ldi	r17, 0x00	; 0
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	80 81       	ld	r24, Z
    1bba:	8b 7f       	andi	r24, 0xFB	; 251
    1bbc:	80 83       	st	Z, r24
    1bbe:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1bc0:	81 60       	ori	r24, 0x01	; 1
    1bc2:	88 83       	st	Y, r24
    1bc4:	42 e3       	ldi	r20, 0x32	; 50
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1bc6:	60 e0       	ldi	r22, 0x00	; 0
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	4d df       	rcall	.-358    	; 0x1a66 <Endpoint_ConfigureEndpoint_Prv>
    1bcc:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	8e 7f       	andi	r24, 0xFE	; 254
    1bd4:	80 83       	st	Z, r24
    1bd6:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	81 60       	ori	r24, 0x01	; 1
    1bde:	80 83       	st	Z, r24
    1be0:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1be2:	88 60       	ori	r24, 0x08	; 8
    1be4:	80 83       	st	Z, r24
    1be6:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1be8:	80 81       	ld	r24, Z
    1bea:	8e 7f       	andi	r24, 0xFE	; 254
    1bec:	80 83       	st	Z, r24
    1bee:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1bf0:	80 61       	ori	r24, 0x10	; 16
    1bf2:	88 83       	st	Y, r24
    1bf4:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1bf6:	cf 91       	pop	r28
    1bf8:	1f 91       	pop	r17
    1bfa:	0f 91       	pop	r16
    1bfc:	08 95       	ret

00001bfe <USB_Init>:
    1bfe:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	8f 7e       	andi	r24, 0xEF	; 239
    1c06:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1c08:	e7 ed       	ldi	r30, 0xD7	; 215
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	81 60       	ori	r24, 0x01	; 1
    1c10:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <USB_IsInitialized>

	USB_ResetInterface();
    1c18:	ad cf       	rjmp	.-166    	; 0x1b74 <USB_ResetInterface>

00001c1a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1c1a:	e8 ed       	ldi	r30, 0xD8	; 216
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	8c 7f       	andi	r24, 0xFC	; 252
    1c22:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1c24:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1c28:	08 95       	ret

00001c2a <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1c2a:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1c2e:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1c32:	08 95       	ret

00001c34 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1c34:	1f 92       	push	r1
    1c36:	0f 92       	push	r0
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	0f 92       	push	r0
    1c3c:	11 24       	eor	r1, r1
    1c3e:	0b b6       	in	r0, 0x3b	; 59
    1c40:	0f 92       	push	r0
    1c42:	2f 93       	push	r18
    1c44:	3f 93       	push	r19
    1c46:	4f 93       	push	r20
    1c48:	5f 93       	push	r21
    1c4a:	6f 93       	push	r22
    1c4c:	7f 93       	push	r23
    1c4e:	8f 93       	push	r24
    1c50:	9f 93       	push	r25
    1c52:	af 93       	push	r26
    1c54:	bf 93       	push	r27
    1c56:	ef 93       	push	r30
    1c58:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1c5a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1c5e:	82 ff       	sbrs	r24, 2
    1c60:	0a c0       	rjmp	.+20     	; 0x1c76 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1c62:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1c66:	82 ff       	sbrs	r24, 2
    1c68:	06 c0       	rjmp	.+12     	; 0x1c76 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1c6a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1c6e:	8b 7f       	andi	r24, 0xFB	; 251
    1c70:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1c74:	0a d2       	rcall	.+1044   	; 0x208a <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1c76:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1c7a:	80 ff       	sbrs	r24, 0
    1c7c:	1d c0       	rjmp	.+58     	; 0x1cb8 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1c7e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1c82:	80 ff       	sbrs	r24, 0
    1c84:	19 c0       	rjmp	.+50     	; 0x1cb8 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1c86:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    1c8a:	8e 7f       	andi	r24, 0xFE	; 254
    1c8c:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1c90:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1c94:	80 ff       	sbrs	r24, 0
    1c96:	0c c0       	rjmp	.+24     	; 0x1cb0 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1c98:	84 e1       	ldi	r24, 0x14	; 20
    1c9a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1c9c:	86 e1       	ldi	r24, 0x16	; 22
    1c9e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1ca0:	09 b4       	in	r0, 0x29	; 41
    1ca2:	00 fe       	sbrs	r0, 0
    1ca4:	fd cf       	rjmp	.-6      	; 0x1ca0 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    1cac:	ec db       	rcall	.-2088   	; 0x1486 <EVENT_USB_Device_Connect>
    1cae:	04 c0       	rjmp	.+8      	; 0x1cb8 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1cb0:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1cb2:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1cb6:	e8 db       	rcall	.-2096   	; 0x1488 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1cb8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1cbc:	80 ff       	sbrs	r24, 0
    1cbe:	18 c0       	rjmp	.+48     	; 0x1cf0 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1cc0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1cc4:	80 ff       	sbrs	r24, 0
    1cc6:	14 c0       	rjmp	.+40     	; 0x1cf0 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1cc8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1ccc:	8e 7f       	andi	r24, 0xFE	; 254
    1cce:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1cd2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1cd6:	80 61       	ori	r24, 0x10	; 16
    1cd8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1cdc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1ce0:	80 62       	ori	r24, 0x20	; 32
    1ce2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1ce6:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1ce8:	85 e0       	ldi	r24, 0x05	; 5
    1cea:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1cee:	cd d1       	rcall	.+922    	; 0x208a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1cf0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1cf4:	84 ff       	sbrs	r24, 4
    1cf6:	2f c0       	rjmp	.+94     	; 0x1d56 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1cf8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1cfc:	84 ff       	sbrs	r24, 4
    1cfe:	2b c0       	rjmp	.+86     	; 0x1d56 <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d00:	84 e1       	ldi	r24, 0x14	; 20
    1d02:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d04:	86 e1       	ldi	r24, 0x16	; 22
    1d06:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1d08:	09 b4       	in	r0, 0x29	; 41
    1d0a:	00 fe       	sbrs	r0, 0
    1d0c:	fd cf       	rjmp	.-6      	; 0x1d08 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1d0e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1d12:	8f 7d       	andi	r24, 0xDF	; 223
    1d14:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1d18:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1d1c:	8f 7e       	andi	r24, 0xEF	; 239
    1d1e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1d22:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1d26:	8f 7e       	andi	r24, 0xEF	; 239
    1d28:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1d2c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1d30:	81 60       	ori	r24, 0x01	; 1
    1d32:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1d36:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_Device_ConfigurationNumber>
    1d3a:	88 23       	and	r24, r24
    1d3c:	11 f0       	breq	.+4      	; 0x1d42 <__vector_10+0x10e>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1d3e:	84 e0       	ldi	r24, 0x04	; 4
    1d40:	07 c0       	rjmp	.+14     	; 0x1d50 <__vector_10+0x11c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1d42:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1d46:	87 fd       	sbrc	r24, 7
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <__vector_10+0x11a>
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	01 c0       	rjmp	.+2      	; 0x1d50 <__vector_10+0x11c>
    1d4e:	83 e0       	ldi	r24, 0x03	; 3
    1d50:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1d54:	9a d1       	rcall	.+820    	; 0x208a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1d56:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1d5a:	83 ff       	sbrs	r24, 3
    1d5c:	22 c0       	rjmp	.+68     	; 0x1da2 <__vector_10+0x16e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1d5e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1d62:	83 ff       	sbrs	r24, 3
    1d64:	1e c0       	rjmp	.+60     	; 0x1da2 <__vector_10+0x16e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1d66:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1d6a:	87 7f       	andi	r24, 0xF7	; 247
    1d6c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1d70:	82 e0       	ldi	r24, 0x02	; 2
    1d72:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1d76:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1d7a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1d7e:	8e 7f       	andi	r24, 0xFE	; 254
    1d80:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d84:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1d88:	8e 7f       	andi	r24, 0xFE	; 254
    1d8a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d8e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1d92:	80 61       	ori	r24, 0x10	; 16
    1d94:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d98:	42 e3       	ldi	r20, 0x32	; 50
    1d9a:	60 e0       	ldi	r22, 0x00	; 0
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	63 de       	rcall	.-826    	; 0x1a66 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1da0:	74 d1       	rcall	.+744    	; 0x208a <USB_Event_Stub>
    1da2:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1da4:	ef 91       	pop	r30
    1da6:	bf 91       	pop	r27
    1da8:	af 91       	pop	r26
    1daa:	9f 91       	pop	r25
    1dac:	8f 91       	pop	r24
    1dae:	7f 91       	pop	r23
    1db0:	6f 91       	pop	r22
    1db2:	5f 91       	pop	r21
    1db4:	4f 91       	pop	r20
    1db6:	3f 91       	pop	r19
    1db8:	2f 91       	pop	r18
    1dba:	0f 90       	pop	r0
    1dbc:	0b be       	out	0x3b, r0	; 59
    1dbe:	0f 90       	pop	r0
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	0f 90       	pop	r0
    1dc4:	1f 90       	pop	r1
    1dc6:	18 95       	reti

00001dc8 <USB_Device_ProcessControlRequest>:
    1dc8:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1dca:	cf 93       	push	r28
    1dcc:	df 93       	push	r29
    1dce:	cd b7       	in	r28, 0x3d	; 61
    1dd0:	de b7       	in	r29, 0x3e	; 62
    1dd2:	aa 97       	sbiw	r28, 0x2a	; 42
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	e8 e1       	ldi	r30, 0x18	; 24
    1de0:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1de2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1de6:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1de8:	21 e0       	ldi	r18, 0x01	; 1
    1dea:	e0 32       	cpi	r30, 0x20	; 32
    1dec:	f2 07       	cpc	r31, r18
    1dee:	c9 f7       	brne	.-14     	; 0x1de2 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1df0:	54 db       	rcall	.-2392   	; 0x149a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1df2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1df6:	83 ff       	sbrs	r24, 3
    1df8:	30 c1       	rjmp	.+608    	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1dfa:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1dfe:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <USB_ControlRequest+0x1>
    1e02:	95 30       	cpi	r25, 0x05	; 5
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <USB_Device_ProcessControlRequest+0x40>
    1e06:	83 c0       	rjmp	.+262    	; 0x1f0e <USB_Device_ProcessControlRequest+0x146>
    1e08:	30 f4       	brcc	.+12     	; 0x1e16 <USB_Device_ProcessControlRequest+0x4e>
    1e0a:	91 30       	cpi	r25, 0x01	; 1
    1e0c:	a9 f1       	breq	.+106    	; 0x1e78 <USB_Device_ProcessControlRequest+0xb0>
    1e0e:	68 f0       	brcs	.+26     	; 0x1e2a <USB_Device_ProcessControlRequest+0x62>
    1e10:	93 30       	cpi	r25, 0x03	; 3
    1e12:	91 f1       	breq	.+100    	; 0x1e78 <USB_Device_ProcessControlRequest+0xb0>
    1e14:	22 c1       	rjmp	.+580    	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
    1e16:	98 30       	cpi	r25, 0x08	; 8
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <USB_Device_ProcessControlRequest+0x54>
    1e1a:	ef c0       	rjmp	.+478    	; 0x1ffa <USB_Device_ProcessControlRequest+0x232>
    1e1c:	99 30       	cpi	r25, 0x09	; 9
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <USB_Device_ProcessControlRequest+0x5a>
    1e20:	fb c0       	rjmp	.+502    	; 0x2018 <__DATA_REGION_LENGTH__+0x18>
    1e22:	96 30       	cpi	r25, 0x06	; 6
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <USB_Device_ProcessControlRequest+0x60>
    1e26:	19 c1       	rjmp	.+562    	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
    1e28:	94 c0       	rjmp	.+296    	; 0x1f52 <USB_Device_ProcessControlRequest+0x18a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e2a:	80 38       	cpi	r24, 0x80	; 128
    1e2c:	21 f0       	breq	.+8      	; 0x1e36 <USB_Device_ProcessControlRequest+0x6e>
    1e2e:	82 38       	cpi	r24, 0x82	; 130
    1e30:	09 f0       	breq	.+2      	; 0x1e34 <USB_Device_ProcessControlRequest+0x6c>
    1e32:	13 c1       	rjmp	.+550    	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
    1e34:	08 c0       	rjmp	.+16     	; 0x1e46 <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1e36:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1e3a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <USB_Device_RemoteWakeupEnabled>
    1e3e:	99 23       	and	r25, r25
    1e40:	89 f0       	breq	.+34     	; 0x1e64 <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1e42:	82 60       	ori	r24, 0x02	; 2
    1e44:	0f c0       	rjmp	.+30     	; 0x1e64 <USB_Device_ProcessControlRequest+0x9c>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1e46:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_ControlRequest+0x4>
    1e4a:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1e4c:	87 30       	cpi	r24, 0x07	; 7
    1e4e:	08 f0       	brcs	.+2      	; 0x1e52 <USB_Device_ProcessControlRequest+0x8a>
    1e50:	04 c1       	rjmp	.+520    	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e52:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1e56:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    1e5a:	85 fb       	bst	r24, 5
    1e5c:	88 27       	eor	r24, r24
    1e5e:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e60:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e64:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e68:	97 7f       	andi	r25, 0xF7	; 247
    1e6a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1e6e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    1e72:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1e76:	cc c0       	rjmp	.+408    	; 0x2010 <__DATA_REGION_LENGTH__+0x10>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e78:	28 2f       	mov	r18, r24
    1e7a:	2d 7f       	andi	r18, 0xFD	; 253
    1e7c:	09 f0       	breq	.+2      	; 0x1e80 <USB_Device_ProcessControlRequest+0xb8>
    1e7e:	ed c0       	rjmp	.+474    	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1e80:	88 23       	and	r24, r24
    1e82:	19 f0       	breq	.+6      	; 0x1e8a <USB_Device_ProcessControlRequest+0xc2>
    1e84:	82 30       	cpi	r24, 0x02	; 2
    1e86:	61 f0       	breq	.+24     	; 0x1ea0 <USB_Device_ProcessControlRequest+0xd8>
    1e88:	e8 c0       	rjmp	.+464    	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1e8a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_ControlRequest+0x2>
    1e8e:	81 30       	cpi	r24, 0x01	; 1
    1e90:	09 f0       	breq	.+2      	; 0x1e94 <USB_Device_ProcessControlRequest+0xcc>
    1e92:	e3 c0       	rjmp	.+454    	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1e94:	93 30       	cpi	r25, 0x03	; 3
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <USB_Device_ProcessControlRequest+0xd2>
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <USB_Device_RemoteWakeupEnabled>
    1e9e:	2e c0       	rjmp	.+92     	; 0x1efc <USB_Device_ProcessControlRequest+0x134>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1ea0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_ControlRequest+0x2>
    1ea4:	81 11       	cpse	r24, r1
    1ea6:	2a c0       	rjmp	.+84     	; 0x1efc <USB_Device_ProcessControlRequest+0x134>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1ea8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_ControlRequest+0x4>
    1eac:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1eae:	2f ef       	ldi	r18, 0xFF	; 255
    1eb0:	28 0f       	add	r18, r24
    1eb2:	26 30       	cpi	r18, 0x06	; 6
    1eb4:	08 f0       	brcs	.+2      	; 0x1eb8 <USB_Device_ProcessControlRequest+0xf0>
    1eb6:	d1 c0       	rjmp	.+418    	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1eb8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1ebc:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1ec0:	20 ff       	sbrs	r18, 0
    1ec2:	1c c0       	rjmp	.+56     	; 0x1efc <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1ec4:	93 30       	cpi	r25, 0x03	; 3
    1ec6:	21 f4       	brne	.+8      	; 0x1ed0 <USB_Device_ProcessControlRequest+0x108>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1ec8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1ecc:	80 62       	ori	r24, 0x20	; 32
    1ece:	14 c0       	rjmp	.+40     	; 0x1ef8 <USB_Device_ProcessControlRequest+0x130>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1ed0:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1ed4:	90 61       	ori	r25, 0x10	; 16
    1ed6:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1eda:	21 e0       	ldi	r18, 0x01	; 1
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	a9 01       	movw	r20, r18
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <USB_Device_ProcessControlRequest+0x11e>
    1ee2:	44 0f       	add	r20, r20
    1ee4:	55 1f       	adc	r21, r21
    1ee6:	8a 95       	dec	r24
    1ee8:	e2 f7       	brpl	.-8      	; 0x1ee2 <USB_Device_ProcessControlRequest+0x11a>
    1eea:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1eee:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1ef2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1ef6:	88 60       	ori	r24, 0x08	; 8
    1ef8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1efc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f04:	87 7f       	andi	r24, 0xF7	; 247
    1f06:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1f0a:	e2 dd       	rcall	.-1084   	; 0x1ad0 <Endpoint_ClearStatusStage>
    1f0c:	a6 c0       	rjmp	.+332    	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f0e:	81 11       	cpse	r24, r1
    1f10:	a4 c0       	rjmp	.+328    	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1f12:	10 91 1a 01 	lds	r17, 0x011A	; 0x80011a <USB_ControlRequest+0x2>
    1f16:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1f18:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1f1c:	80 78       	andi	r24, 0x80	; 128
    1f1e:	81 2b       	or	r24, r17
    1f20:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1f24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f28:	87 7f       	andi	r24, 0xF7	; 247
    1f2a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1f2e:	d0 dd       	rcall	.-1120   	; 0x1ad0 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f30:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    1f34:	80 ff       	sbrs	r24, 0
    1f36:	fc cf       	rjmp	.-8      	; 0x1f30 <USB_Device_ProcessControlRequest+0x168>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1f38:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1f3c:	80 68       	ori	r24, 0x80	; 128
    1f3e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1f42:	11 11       	cpse	r17, r1
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <USB_Device_ProcessControlRequest+0x182>
    1f46:	82 e0       	ldi	r24, 0x02	; 2
    1f48:	01 c0       	rjmp	.+2      	; 0x1f4c <USB_Device_ProcessControlRequest+0x184>
    1f4a:	83 e0       	ldi	r24, 0x03	; 3
    1f4c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_DeviceState>
    1f50:	84 c0       	rjmp	.+264    	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f52:	80 58       	subi	r24, 0x80	; 128
    1f54:	82 30       	cpi	r24, 0x02	; 2
    1f56:	08 f0       	brcs	.+2      	; 0x1f5a <USB_Device_ProcessControlRequest+0x192>
    1f58:	80 c0       	rjmp	.+256    	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1f5a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_ControlRequest+0x2>
    1f5e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <USB_ControlRequest+0x3>
    1f62:	8c 3d       	cpi	r24, 0xDC	; 220
    1f64:	53 e0       	ldi	r21, 0x03	; 3
    1f66:	95 07       	cpc	r25, r21
    1f68:	71 f5       	brne	.+92     	; 0x1fc6 <USB_Device_ProcessControlRequest+0x1fe>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1f6a:	83 e0       	ldi	r24, 0x03	; 3
    1f6c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1f6e:	8a e2       	ldi	r24, 0x2A	; 42
    1f70:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1f72:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1f74:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1f76:	de 01       	movw	r26, r28
    1f78:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1f7c:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1f7e:	51 e2       	ldi	r21, 0x21	; 33
    1f80:	e3 2f       	mov	r30, r19
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    1f88:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1f8a:	20 ff       	sbrs	r18, 0
    1f8c:	03 c0       	rjmp	.+6      	; 0x1f94 <USB_Device_ProcessControlRequest+0x1cc>
					{
						SerialByte >>= 4;
    1f8e:	e2 95       	swap	r30
    1f90:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1f92:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1f94:	ef 70       	andi	r30, 0x0F	; 15
    1f96:	8e 2f       	mov	r24, r30
    1f98:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1f9a:	ea 30       	cpi	r30, 0x0A	; 10
    1f9c:	10 f0       	brcs	.+4      	; 0x1fa2 <USB_Device_ProcessControlRequest+0x1da>
    1f9e:	c7 96       	adiw	r24, 0x37	; 55
    1fa0:	01 c0       	rjmp	.+2      	; 0x1fa4 <USB_Device_ProcessControlRequest+0x1dc>
    1fa2:	c0 96       	adiw	r24, 0x30	; 48
    1fa4:	8d 93       	st	X+, r24
    1fa6:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1fa8:	2f 5f       	subi	r18, 0xFF	; 255
    1faa:	24 31       	cpi	r18, 0x14	; 20
    1fac:	49 f7       	brne	.-46     	; 0x1f80 <USB_Device_ProcessControlRequest+0x1b8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1fae:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fb0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1fb4:	87 7f       	andi	r24, 0xF7	; 247
    1fb6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1fba:	6a e2       	ldi	r22, 0x2A	; 42
    1fbc:	70 e0       	ldi	r23, 0x00	; 0
    1fbe:	ce 01       	movw	r24, r28
    1fc0:	01 96       	adiw	r24, 0x01	; 1
    1fc2:	94 dc       	rcall	.-1752   	; 0x18ec <Endpoint_Write_Control_Stream_LE>
    1fc4:	14 c0       	rjmp	.+40     	; 0x1fee <USB_Device_ProcessControlRequest+0x226>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1fc6:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <USB_ControlRequest+0x4>
    1fca:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <USB_ControlRequest+0x5>
    1fce:	ae 01       	movw	r20, r28
    1fd0:	4f 5f       	subi	r20, 0xFF	; 255
    1fd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd4:	b6 db       	rcall	.-2196   	; 0x1742 <CALLBACK_USB_GetDescriptor>
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	89 2b       	or	r24, r25
    1fda:	09 f4       	brne	.+2      	; 0x1fde <USB_Device_ProcessControlRequest+0x216>
    1fdc:	3e c0       	rjmp	.+124    	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
    1fde:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1fe2:	97 7f       	andi	r25, 0xF7	; 247
    1fe4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	9a 81       	ldd	r25, Y+2	; 0x02
    1fec:	dc dc       	rcall	.-1608   	; 0x19a6 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1fee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ff2:	8b 77       	andi	r24, 0x7B	; 123
    1ff4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ff8:	30 c0       	rjmp	.+96     	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1ffa:	80 38       	cpi	r24, 0x80	; 128
    1ffc:	71 f5       	brne	.+92     	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ffe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2002:	87 7f       	andi	r24, 0xF7	; 247
    2004:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2008:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    200c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2010:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2014:	8e 77       	andi	r24, 0x7E	; 126
    2016:	77 cf       	rjmp	.-274    	; 0x1f06 <USB_Device_ProcessControlRequest+0x13e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2018:	81 11       	cpse	r24, r1
    201a:	1f c0       	rjmp	.+62     	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    201c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_ControlRequest+0x2>
    2020:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <USB_ControlRequest+0x3>
    2024:	99 27       	eor	r25, r25
    2026:	02 97       	sbiw	r24, 0x02	; 2
    2028:	c4 f4       	brge	.+48     	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    202a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    202e:	87 7f       	andi	r24, 0xF7	; 247
    2030:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2034:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_ControlRequest+0x2>
    2038:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    203c:	49 dd       	rcall	.-1390   	; 0x1ad0 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    203e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_Device_ConfigurationNumber>
    2042:	81 11       	cpse	r24, r1
    2044:	06 c0       	rjmp	.+12     	; 0x2052 <__DATA_REGION_LENGTH__+0x52>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2046:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    204a:	87 fd       	sbrc	r24, 7
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <__DATA_REGION_LENGTH__+0x52>
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	01 c0       	rjmp	.+2      	; 0x2054 <__DATA_REGION_LENGTH__+0x54>
    2052:	84 e0       	ldi	r24, 0x04	; 4
    2054:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    2058:	18 da       	rcall	.-3024   	; 0x148a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    205a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    205e:	83 ff       	sbrs	r24, 3
    2060:	0a c0       	rjmp	.+20     	; 0x2076 <__DATA_REGION_LENGTH__+0x76>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2062:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2066:	87 7f       	andi	r24, 0xF7	; 247
    2068:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    206c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2070:	80 62       	ori	r24, 0x20	; 32
    2072:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2076:	aa 96       	adiw	r28, 0x2a	; 42
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	1f 91       	pop	r17
    2088:	08 95       	ret

0000208a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    208a:	08 95       	ret

0000208c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    208c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    208e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_DeviceState>
    2092:	88 23       	and	r24, r24
    2094:	99 f0       	breq	.+38     	; 0x20bc <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2096:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    209a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    209c:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    20a0:	89 2f       	mov	r24, r25
    20a2:	81 70       	andi	r24, 0x01	; 1
    20a4:	90 fd       	sbrc	r25, 0
    20a6:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    20a8:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20aa:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    20ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    20b2:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    20b4:	89 de       	rcall	.-750    	; 0x1dc8 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20b6:	cf 70       	andi	r28, 0x0F	; 15
    20b8:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    20bc:	cf 91       	pop	r28
    20be:	08 95       	ret

000020c0 <__divmodhi4>:
    20c0:	97 fb       	bst	r25, 7
    20c2:	07 2e       	mov	r0, r23
    20c4:	16 f4       	brtc	.+4      	; 0x20ca <__divmodhi4+0xa>
    20c6:	00 94       	com	r0
    20c8:	06 d0       	rcall	.+12     	; 0x20d6 <__divmodhi4_neg1>
    20ca:	77 fd       	sbrc	r23, 7
    20cc:	08 d0       	rcall	.+16     	; 0x20de <__divmodhi4_neg2>
    20ce:	0b d0       	rcall	.+22     	; 0x20e6 <__udivmodhi4>
    20d0:	07 fc       	sbrc	r0, 7
    20d2:	05 d0       	rcall	.+10     	; 0x20de <__divmodhi4_neg2>
    20d4:	3e f4       	brtc	.+14     	; 0x20e4 <__divmodhi4_exit>

000020d6 <__divmodhi4_neg1>:
    20d6:	90 95       	com	r25
    20d8:	81 95       	neg	r24
    20da:	9f 4f       	sbci	r25, 0xFF	; 255
    20dc:	08 95       	ret

000020de <__divmodhi4_neg2>:
    20de:	70 95       	com	r23
    20e0:	61 95       	neg	r22
    20e2:	7f 4f       	sbci	r23, 0xFF	; 255

000020e4 <__divmodhi4_exit>:
    20e4:	08 95       	ret

000020e6 <__udivmodhi4>:
    20e6:	aa 1b       	sub	r26, r26
    20e8:	bb 1b       	sub	r27, r27
    20ea:	51 e1       	ldi	r21, 0x11	; 17
    20ec:	07 c0       	rjmp	.+14     	; 0x20fc <__udivmodhi4_ep>

000020ee <__udivmodhi4_loop>:
    20ee:	aa 1f       	adc	r26, r26
    20f0:	bb 1f       	adc	r27, r27
    20f2:	a6 17       	cp	r26, r22
    20f4:	b7 07       	cpc	r27, r23
    20f6:	10 f0       	brcs	.+4      	; 0x20fc <__udivmodhi4_ep>
    20f8:	a6 1b       	sub	r26, r22
    20fa:	b7 0b       	sbc	r27, r23

000020fc <__udivmodhi4_ep>:
    20fc:	88 1f       	adc	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	5a 95       	dec	r21
    2102:	a9 f7       	brne	.-22     	; 0x20ee <__udivmodhi4_loop>
    2104:	80 95       	com	r24
    2106:	90 95       	com	r25
    2108:	bc 01       	movw	r22, r24
    210a:	cd 01       	movw	r24, r26
    210c:	08 95       	ret

0000210e <_exit>:
    210e:	f8 94       	cli

00002110 <__stop_program>:
    2110:	ff cf       	rjmp	.-2      	; 0x2110 <__stop_program>
